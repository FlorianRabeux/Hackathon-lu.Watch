namespace sap.common;

annotation UI 
{
	headerInfo 
	{
	    typeName: String(100); 
		typeNamePlural: String(100);
    	typeImageUrl: String(100);
    	imageUrl: String(100);
    	title 
    	{
    	    type: String(100) enum { STANDARD='STANDARD'; WITH_INTENT_BASED_NAVIGATION='WITH_INTENT_BASED_NAVIGATION'; 
                                WITH_NAVIGATION_PATH='WITH_NAVIGATION_PATH'; WITH_URL='WITH_URL'; };
			label: String(100); 
			iconUrl: String(100);
			criticality: Integer enum{ Neutral=0; Negative=1; Critical=2; Positive=3;};
			dataAction: String(100);        
			invocationGrouping: String(20) enum { ISOLATED='Isolated'; CHANGE_SET='Changeset'; };
			semanticObjectAction: String(100);
			value: String(100);
			targetElement: String(100);
			url: String(200);
    	};
    	description 
	    {
	        type: String(100) enum { STANDARD='STANDARD'; WITH_INTENT_BASED_NAVIGATION='WITH_INTENT_BASED_NAVIGATION'; 
	                                WITH_NAVIGATION_PATH='WITH_NAVIGATION_PATH'; WITH_URL='WITH_URL'; };
			label: String(100); 
			iconUrl: String(100);
			criticality: Integer enum{ Neutral=0; Negative=1; Critical=2; Positive=3;};
			dataAction: String(100);        
			invocationGrouping: String(20) enum { ISOLATED='Isolated'; CHANGE_SET='Changeset'; };
			semanticObjectAction: String(100);
			value: Integer;
			targetElement: String(100);
			url: String(200);
	    };
    };
	
	lineItem: array of 
	{
			qualifier: String(100);
			position: DecimalFloat;
			exclude: Boolean;
			importance : String(10) enum { HIGH='High'; MEDIUM='Medium'; LOW='Low'; };
			 
			type: String(100) enum { STANDARD='STANDARD'; WITH_INTENT_BASED_NAVIGATION='WITH_INTENT_BASED_NAVIGATION'; 
                                WITH_NAVIGATION_PATH='WITH_NAVIGATION_PATH'; WITH_URL='WITH_URL'; };
				  
			label: String(100); 
			iconUrl: String(100);
			criticality: Integer enum{ Neutral=0; Negative=1; Critical=2; Positive=3;};
			dataAction: String(100);        
			invocationGrouping: String(20) enum { ISOLATED='Isolated'; CHANGE_SET='Changeset'; };
			semanticObjectAction: String(100);
			value: String(100);
			targetElement: String(100);
			url: String(200);
	};
		
	identification: array of 
	{
			position: DecimalFloat;
			exclude: Boolean;
			importance : String(10) enum { HIGH='High'; MEDIUM='Medium'; LOW='Low'; };
			 
			type: String(100) enum { STANDARD='STANDARD'; WITH_INTENT_BASED_NAVIGATION='WITH_INTENT_BASED_NAVIGATION'; 
                                WITH_NAVIGATION_PATH='WITH_NAVIGATION_PATH'; WITH_URL='WITH_URL'; };
				  
			label: String(100); 
			iconUrl: String(100);
			criticality: Integer enum{ Neutral=0; Negative=1; Critical=2; Positive=3;};
			dataAction: String(100);        
			invocationGrouping: String(20) enum { ISOLATED='Isolated'; CHANGE_SET='Changeset'; };
			semanticObjectAction: String(100);
			value: String(100);
			targetElement: String(100);
			url: String(200);
	};	
		
	statusInfo: array of {
			position: DecimalFloat;
			exclude: Boolean;
			importance : String(10) enum { HIGH='High'; MEDIUM='Medium'; LOW='Low'; };
			 
			type: String(100) enum { STANDARD='STANDARD'; WITH_INTENT_BASED_NAVIGATION='WITH_INTENT_BASED_NAVIGATION'; 
                                WITH_NAVIGATION_PATH='WITH_NAVIGATION_PATH'; WITH_URL='WITH_URL'; };
				  
			label: String(100); 
			iconUrl: String(100);
			criticality: Integer enum{ Neutral=0; Negative=1; Critical=2; Positive=3;};
			dataAction: String(100);        
			invocationGrouping: String(20) enum { ISOLATED='Isolated'; CHANGE_SET='Changeset'; };
			semanticObjectAction: String(100);
			value: String(100);
			targetElement: String(100);
			url: String(200);
	};		
	
	fieldGroup: array of 
	{
			qualifier: String(100);
			groupLabel: String(100);
			position: DecimalFloat;
			exclude: Boolean;
			importance : String(10) enum { HIGH='High'; MEDIUM='Medium'; LOW='Low'; };
			 
			type: String(100) enum { STANDARD='STANDARD'; WITH_INTENT_BASED_NAVIGATION='WITH_INTENT_BASED_NAVIGATION'; 
                                WITH_NAVIGATION_PATH='WITH_NAVIGATION_PATH'; WITH_URL='WITH_URL'; };
				  
			label: String(100); 
			iconUrl: String(100);
			criticality: Integer enum{ Neutral=0; Negative=1; Critical=2; Positive=3;};
			dataAction: String(100);        
			invocationGrouping: String(20) enum { ISOLATED='Isolated'; CHANGE_SET='Changeset'; };
			semanticObjectAction: String(100);
			value: String(100);
			targetElement: String(100);
			url: String(200);
	};
	
	hidden: Boolean;
	readOnly: Boolean;
	optional: Boolean;
	mandatory: Boolean;
    masked: Boolean;
    multiLineText: Boolean;
	
	dataPoint 
	{
		title: String(100);
		description: String(100);
		longDescription: String(100);
		targetValue: DecimalFloat;
		targetValueElement: String(100);
		valueFormat {
			scaleFactor: DecimalFloat;
			numberOfFractionalDigits: Integer;
	};
		visualization: String(50) enum { NUMBER='NUMBER'; BULLET_CHART='BULLET_CHART'; DONUT='DONUT'; PROGRESS='PROGRESS'; RATING='RATING'; };
		referencePeriod 
		{
			description: String(100);
			"start": String(100);
			"end": String(100);
		};
		criticality: String(100);
		criticalityCalculation 
		{
			improvementDirection: String(20) enum { MINIMIZE='MINIMIZE'; TARGET='TARGET'; MAXIMIZE='MAXIMIZE'; };
			toleranceRangeLowValue: DecimalFloat;
			toleranceRangeLowValueElement: String(100);
			toleranceRangeHighValue: DecimalFloat;
			toleranceRangeHighValueElement: String(100);
			deviationRangeLowValue:  DecimalFloat;
			deviationRangeLowValueElement:  String(100);
			deviationRangeHighValue: DecimalFloat;
			deviationRangeHighValueElement: String(100);
		};
		trend: String(100); 
		trendCalculation 
		{
			referenceValue: String(100);
			isRelativeDifference: Boolean;
			upDifference: DecimalFloat;
			upDifferenceElement: String(100);
			strongUpDifference: DecimalFloat;
			strongUpDifferenceElement: String(100);
			downDifference: DecimalFloat;
			downDifferenceElement: String(100);
			strongDownDifference: DecimalFloat;
			strongDownDifferenceElement: String(100);
		};
		responsible: String(100);
		responsibleName: String(100);
	};
		
	selectionField: array of 
	{
		qualifier: String(100);
		position: DecimalFloat;
		exclude: Boolean;
		element: String(100);
	};
		
	chart: array of 
	{
		qualifier: String(100);
		title: String(100);
		description: String(100);
		chartType: String(50) enum { COLUMN='COLUMN'; COLUMN_STACKED='COLUMN_STACKED'; COLUMN_STACKED_100='COLUMN_STACKED_100';
								BAR='BAR'; BAR_STACKED='BAR_STACKED'; BAR_STACKED_100='BAR_STACKED_100';
								AREA='AREA'; AREA_STACKED='AREA_STACKED'; AREA_100='AREA_100';
								HORIZONTAL_AREA='HORIZONTAL_AREA'; HORIZONTAL_AREA_STACKED='HORIZONTAL_AREA_STACKED'; HORIZONTAL_AREA_100='HORIZONTAL_AREA_100';
								LINE='LINE'; PIE='PIE'; DONUT='DONUT'; SCATTER='SCATTER'; BUBBLE='BUBBLE'; RADAR='RADAR'; 
								HEAT_MAP='HEAT_MAP'; TREE_MAP='TREE_MAP'; WATERFALL='WATERFALL'; };
		dimensions: array of String(100);
		measures: array of String(100);
	};
}
