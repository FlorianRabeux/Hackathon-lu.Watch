/**
 * Created by i316696 on 6/28/2016.
 */

'use strict';

const
    fs = require('fs'),
    Configurations = require('./config'),
    RoutesAndDestinations = require('./routesAndDestinations'),
    request = require('request'),
    util = require('util'),
    async = require('async');

class Deployer {
    constructor(configurations, siteFragmentPath, xsAppJsonPath) {
        this.configurations = configurations;
        this.siteFragmentPath = siteFragmentPath;
        this.xsAppJsonPath = xsAppJsonPath;
    }

    updateUserScopes(jsonData) {
        var appName = this.getUaaAppName();
        if (appName) {
            var apps = jsonData.applications;
            for (let i in apps) {
                let app = apps[i];
                if (app['sap.platform.cf']) {
                    let scopes = app['sap.platform.cf'].oAuthScopes;
                    let newScopes = [];
                    scopes.forEach(function(scope) {
                        newScopes.push(scope.replace('$XSAPPNAME', appName));
                    });
                    app['sap.platform.cf'].oAuthScopes = newScopes;
                }
            }
        }
    }

    getUaaAppName() {
        var envVars = JSON.parse(process.env.VCAP_SERVICES),
            appName;
        for (var key in envVars) {
            var svc = envVars[key][0];
            if (svc && svc.tags.indexOf('xsuaa') > -1) {
                appName = svc.credentials.xsappname;
                break;
            }
        }
        return appName;
    }

    deploy() {
        var siteFragmentData;
        var config;
        var returnVal;

        var deployId = process.env.DEPLOY_ID || 'none';
        console.log('Portal deployer started, Deployment id: %s... ', deployId);

        // Set client tolerance for server self signed certificate
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
        var tasks = [];

        // Task for creating configurations
        tasks.push((callback) => {
            try {
                if (this.configurations) {
                    console.log('Creating custom configuration: %s', this.configurations);
                    config = new Configurations(this.configurations, this.siteFragmentPath, this.xsAppJsonPath);
                } else {
                    console.log('Creating default configuration... ');
                    config = new Configurations();
                }
                console.log('Default configuration created... ');
                callback();
            } catch (err) {
                callback(err);
            }
        });

        // Task for reading site fragment file
        tasks.push((callback) => {
            try {
                var jsonPath = config.getFragmentJsonPath();
                console.log('Reading fragment json on fragmentJsonpath: %s', jsonPath);
                siteFragmentData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
                this.updateUserScopes(siteFragmentData);
                console.log('Fragment json readed successfully...');
                callback();
            } catch (err) {
                callback(err.message);
            }
        });

        // Create routes and destinations
        let rad;
        tasks.push((callback) => {
            try {
                if (!config.getIsDeployRoutesAndDests()) {
                    console.log('Routes and destination not created');
                    callback();
                } else {

                    // Create routes and destinations
                    let routesAndDestinations = new RoutesAndDestinations(siteFragmentData, config);
                    routesAndDestinations.createRoutesAndDestinations().then((value) => {
                            rad = value;
                            console.log('Routes and destination created successfully');
                            callback();
                        },
                        (err) => {
                            callback(err);
                        });
                }
            } catch (err) {
                callback(err);
            }
        });

        // Send json to portal service
        tasks.push((callback) => {
            try {
                let headers = {
                    'instanceId': config.getCredentialsParam('instanceId'),
                    'bindingId': config.getCredentialsParam('bindingId'),
                    'Authorization': config.getAuthHeaderValue()
                };
                console.log('Deploy fragment json to persistence url: %s', config.getImportUrl());
                console.log('Headers: %s', util.inspect(headers, false, null));
                console.log('Fragment Json: %s', JSON.stringify(siteFragmentData));
                request.put({
                        url: config.getImportUrl(),
                        headers: headers,
                        json: siteFragmentData,
                        timeout: 5000
                    },
                    (error, response, body) => {
                        if (!error && response && response.statusCode != 200) {
                            error = response.statusCode;
                        }
                        if (!error) {
                            console.log('Fragment json deployed successfully...');
                        }
                        callback(error);
                    }
                );
            } catch (err) {
                callback(err);
            }
        });

        // Persist routes and destinations
        tasks.push((callback) => {
            try {
                if (!config.getIsDeployRoutesAndDests()) {
                    console.log('Routes and destination not deployed');
                    callback();
                } else {

                    // Send the route and destinations to persistency service
                    let headers = {
                        'instanceId': config.getCredentialsParam('instanceId'),
                        'bindingId': config.getCredentialsParam('bindingId'),
                        'mtaId': config.getMTAId('mtaId'),
                        'Authorization': config.getAuthHeaderValue()
                    };
                    console.log('Deploy routes and destinations json to persistence url: %s', config.getRegisterUrl());
                    console.log('Headers: %s', util.inspect(headers, false, null));
                    console.log('Routes and destinations json Json: %s', JSON.stringify(rad));
                    request.post({
                            url: config.getRegisterUrl(),
                            headers: headers,
                            json: rad,
                            timeout: 5000
                        },
                        (error, response, body) => {
                            if (!error && response && response.statusCode != 200) {
                                error = response.statusCode;
                            }
                            if (!error) {
                                console.log('Routes and destinations deployed successfully...');
                            }
                            callback(error);
                        }
                    );
                }
            } catch (err) {
                callback(err);
            }
        });


        // Wait for all async calls and terminate the deployer
        return new Promise((resolve) => {
            async.series(tasks, (err) => {
                /* this code will run after all calls finished the job or
                 when any of the calls passes an error  */
                if (err) {
                    var msg = 'Deployment of site content to persistency failed - error '+ err + ' [Deployment Id: ' +  deployId + ']';
                    returnVal = { code: 1, message: msg };
                } else {
                    var msg = 'Deployment of site content to persistency done [Deployment Id: ' + deployId + ']';
                    returnVal = { code: 0, message: msg };
                }
                resolve(returnVal);
            });
        });
    }
}

module.exports = Deployer;
