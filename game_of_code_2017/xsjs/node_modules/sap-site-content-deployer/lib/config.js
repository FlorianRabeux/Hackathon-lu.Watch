/**
 * Created by I316696 on 6/20/2016.
 */

'use strict';

const path = require('path');

class Configuration {
    constructor(envParams, fragmentJsonPath, xsAppJsonPath) {
        if (envParams) {
            this.servicesEnvVars = this.getPortalServiceEntry(JSON.parse(envParams).VCAP_SERVICES);
            this.envVars = JSON.parse(envParams);
            this.envVars.MTA_METADATA = JSON.stringify(this.envVars.MTA_METADATA);
            this.envVars.DEPLOY_DETAILS = JSON.stringify(this.envVars.DEPLOY_DETAILS);
        } else {
            this.servicesEnvVars = this.getPortalServiceEntry(JSON.parse(process.env.VCAP_SERVICES));
            this.envVars = process.env;
        }

        if (fragmentJsonPath) {
            this.fragmentJsonpath = fragmentJsonPath;
        } else {
            this.fragmentJsonpath = path.join(__dirname, '..','..','..','src','site-content.json');
        }
        if (xsAppJsonPath) {
            this.xsAppJsonPath = xsAppJsonPath;
        } else {
            this.xsAppJsonPath = path.join(__dirname, '..','..','..','src','xs-app.json');
        }
    }

    getPortalServiceEntry (services) {
        for (var property in services) {
            if (services[property] && services[property][0] && services[property][0].tags) {
                var tags = services[property][0].tags;
                if (this.isArrayInclude(tags, "portal")) {
                    return services[property][0];
                }
            }
        }
    }

    getCredentialsParam(param) {
        try {
            return this.servicesEnvVars['credentials'][param];
        } catch (err) {
            console.error(err.message);
        }
    }

    getImportUrl() {
        return this.getCredentialsParam('url') + '/v1/site';
    }

    getRegisterUrl() {
        return this.getCredentialsParam('url') + '/v1/routes';
    }

    getAuthHeaderValue() {
        return 'Basic ' + new Buffer( this.getCredentialsParam('user') + ':' + this.getCredentialsParam('password')).toString('base64');
    }

    getFragmentJsonPath() {
        return this.fragmentJsonpath;
    }

    getXsAppJsonPath() {
        return this.xsAppJsonPath;
    }

    getAppRouterHttpUrl() {
        return JSON.parse(this.envVars.DEPLOY_DETAILS)['url'];
    }

    getMTAId() {
        return JSON.parse(this.envVars.MTA_METADATA)['id'];
    }

    getDestinationsEnvVar() {
        return JSON.parse(this.envVars.DEPLOY_DETAILS)['destinations'];
    }

    getIsDeployRoutesAndDests() {
        if (this.envVars.DEPLOY_DETAILS) {
            let deployDetails = JSON.parse(this.envVars.DEPLOY_DETAILS);
            if (deployDetails['deployRoutesAndDests']) {
                return deployDetails['deployRoutesAndDests'] === 'true';
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    isArrayInclude(arr, item) {
        var isFound = false;
        if (arr && item) {
            for (var index in arr) {
                if (arr[index] === item) {
                    return true;
                }
            }
        }
        return isFound;
    }
}

module.exports = Configuration;

