/**
 * Created by i316696 on 7/6/2016.
 */

'use strict';

const
    fs = require('fs'),
    uuid = require('node-uuid'),
    request = require('request');

class RoutesAndDestiantions {
    constructor(siteFragmentJson, config) {
        this.siteFragmentJson = siteFragmentJson;
        this.config = config;
    }

    createRoutesAndDestinations() {
        return new Promise((resolve, reject) => {
            try {
                let response = {};
                let routes = [];
                let staticResourceDestinations = [];

                console.log('Creating routes and destinations for staticResources destinations...');
                let xsAppRoutes = this.readRoutesFromFile();
                let appRouterHttpUrl = this.config.getAppRouterHttpUrl();

                // Create the routes for the staticResources files
                xsAppRoutes.staticResources.forEach((staticResourceRoute) => {
                    staticResourceDestinations.push(this.createStaticRouteAndDestination(staticResourceRoute, appRouterHttpUrl));
                    routes.push(staticResourceRoute);
                });

                response.routes = routes;
                response.staticResourceDestinations = staticResourceDestinations;
                response.backendDestinations = this.getBackendDestinations();
                resolve(response);
            } catch (err) {
                reject(err);
            }
        });
    }

    readRoutesFromFile() {
        let routes = {};
        routes.staticResources = [];
        routes.backend = [];

        var xsAppJsonPath = this.config.getXsAppJsonPath();
        console.log('Reading xs-app json on path: %s', xsAppJsonPath);
        let xsAppJson = JSON.parse(fs.readFileSync(xsAppJsonPath, 'utf8'));
        console.log('xs-app json readed successfully...');
        xsAppJson.routes.forEach((route) => {
            if (route.hasOwnProperty('localDir')) {
                routes.staticResources.push(route);
                console.log('Route for staticResources destinations found: %s', JSON.stringify(route));
            } else if (route.hasOwnProperty('destination')) {
                routes.backend.push(route);
                console.log('Route for backend service found: %s', JSON.stringify(route));
            } else {
                console.warn('Route found but colud not classfied: %s', JSON.stringify(route));
            }
        });

        return routes;
    }

    createStaticRouteAndDestination(route, appRouterHttpUrl) {
        let destination = {};
        destination.name = uuid.v4();
        destination.url = appRouterHttpUrl + '/' + route['localDir'];

        delete route['localDir'];
        route.destination = destination.name;
        return destination;
    }

    getBackendDestinations() {
        return this.config.getDestinationsEnvVar();
    }
}

module.exports = RoutesAndDestiantions;
