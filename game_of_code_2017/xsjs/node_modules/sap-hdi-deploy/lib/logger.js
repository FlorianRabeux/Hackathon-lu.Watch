'use strict';

/* jslint indent: 4 */

var fs = require('fs');
var util = require('util');

var trace = process.env.TRACE;

exports.log = console.log;

exports.logfn = function() {
    var args = arguments;
    return function(cb) {
        console.log.apply(console, args);
        cb();
    };
};

exports.error = console.error;

exports.setTrace = function(value) {
    trace = value;
};

exports.trace = function() {
    if (trace) {
        var str = util.format.apply(null, arguments);
        str = str.replace(/PASSWORD.*/ig, 'p[...]');
        console.log(str);
    }
};

var timers = {};

function timerInit(timer) {
    timers[timer] = process.hrtime();
}

function timerDelta(timer) {
    var then = timers[timer];
    var diff = process.hrtime(then);
    if (then || diff) {
        return '(' + (diff[0]) + 's ' + (diff[1] / 1000000).toFixed(0) + 'ms)';
    } else {
        return '';
    }
}

exports.timerInit = timerInit;

exports.timerDelta = timerDelta;

function logTimerInit(timer) {
    var varargs = Array.prototype.slice.call(arguments, 1);
    timerInit(timer);
    console.log.apply(console, varargs);
}

function logTimerDelta(timer) {
    var varargs = Array.prototype.slice.call(arguments, 1);
    var delta = timerDelta(timer);
    varargs.push(delta);
    console.log.apply(console, varargs);
}

exports.logTimerInit = logTimerInit;

exports.logTimerDelta = logTimerDelta;

exports.logfnTimerInit = function() {
    var args = arguments;
    return function(cb) {
        logTimerInit.apply(undefined, args);
        cb();
    };
};

exports.logfnTimerDelta = function() {
    var args = arguments;
    return function(cb) {
        logTimerDelta.apply(undefined, args);
        cb();
    };
};

var verbose = true;

exports.setVerbose = function(value) {
    verbose = value;
};

exports.logVerbose = function() {
    if (verbose) {
        console.log.apply(this, arguments);
    }
};

var logFile;

exports.setLogFile = function(filename) {
    logFile = filename;
};

var logFileMessageId = 0;

exports.logToFile = function(message) {
    if (logFile) {
        ++logFileMessageId;
        message.id = logFileMessageId;
        fs.appendFileSync(logFile, JSON.stringify(message) + '\n');
    }
};
