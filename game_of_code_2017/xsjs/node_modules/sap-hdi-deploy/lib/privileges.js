'use strict';

/* jslint indent: 4 */

var async = require('async');

var hdb = require('./hdbAsync.js');
var hdiTables = require('./hdiTables.js');
var logger = require('./logger.js');
var utils = require('./utils.js');
var paths = require('./paths.js');

function grantPrivileges(client, privileges, grantee, schema, cb) {
    var
        tasks = [],
        tmpTables = [
            ['#PRMS', hdiTables.parameters.type],
            ['#SCHEMAROLES', hdiTables.schemaRoles.type]
        ],
        schemaRoles = [];

    if (privileges.roles) {
        tasks.push(client.grantRoles(privileges.roles, grantee));
    }

    if (privileges.system_privileges) {
        tasks.push(client.grantSystemPrivileges(privileges.system_privileges, grantee));
    }

    if (privileges.schema_privileges) {
        privileges.schema_privileges.forEach(function(obj) {
            if (obj.privileges) {
                tasks.push(client.grantSchemaPrivileges(obj.privileges, obj.reference, grantee, false));
            }
            if (obj.privileges_with_grant_option) {
                tasks.push(client.grantSchemaPrivileges(obj.privileges_with_grant_option, obj.reference, grantee, true));
            }
        });
    }

    if (privileges.object_privileges) {
        privileges.object_privileges.forEach(function(obj) {
            if (obj.privileges) {
                tasks.push(client.grantObjectPrivileges(obj.privileges, obj.schema || schema, obj.name, grantee, false));
            }
            if (obj.privileges_with_grant_option) {
                tasks.push(client.grantObjectPrivileges(obj.privileges_with_grant_option, obj.schema || schema, obj.name, grantee, true));
            }
        });
    }

    if (privileges.container_roles) {
        tasks.push(client.createTmpTables(tmpTables));

        privileges.container_roles.forEach(function(role) {
            schemaRoles.push([role, grantee]);
        });

        tasks.push(client.bulkInsert('#SCHEMAROLES', hdiTables.schemaRoles.fields, schemaRoles));
        tasks.push(client.hdiGrantSchemaRoles(schema, '#SCHEMAROLES', '#PRMS', client.hdiCheckResult('grant container roles', true)));

        tasks.push(client.dropTmpTables(tmpTables));
    }

    async.series(tasks, cb);

}

function grantUsers(privileges, grantor, fileName, creds, container, user, cb) {
    var
        tasks = [],
        client = creds.hdi_user ? hdb(creds.host, creds.port, creds.hdi_user, creds.hdi_password, creds.certificate) : hdb(creds.host, creds.port, creds.user, creds.password, creds.certificate);

    tasks.push(client.connect());
    if (creds.schema) {
        tasks.push(client.setSchema(creds.schema));
    }

    if (privileges.object_owner) {
        tasks.push(function(cb) {
            grantPrivileges(client, privileges.object_owner, container, creds.schema, cb);
        });
    }

    if (privileges.application_user) {
        tasks.push(function(cb) {
            grantPrivileges(client, privileges.application_user, user, creds.schema, cb);
        });
    }

    tasks.push(client.disconnect());

    async.series(tasks, function(err, results) {
        client.end();

        if (err) { // add information about grantor service & underlying user
            err.message += '\ngrantor service: ' + grantor + ', granting user: ';
            if (creds.hdi_user) {
               err.message += creds.hdi_user + ' (hdi_user)';
           } else {
               err.message += creds.user;
           }

            err.message += '\nfile name: ' + fileName;
        }

        cb(err, results);
    });

}

function grantFile(services, root, fileName, container, user, cb) {
    var
        file,
        tasks = [];

    fileName = paths.join(root, paths.clientPath(fileName));

    try {
        file = utils.readJSONFile(fileName);
    } catch (err) {
        cb(err);
        return;
    }

    Object.keys(file).forEach(function(grantor) {
        var creds;
        try {
            creds = services.getCreds(grantor);
        } catch (err) {
            cb(err);
            return;
        }

        logger.trace('grantor', file[grantor]);

        tasks.push(function(cb) {
            grantUsers(file[grantor], grantor, fileName, creds, container, user, cb);
        });

    });

    async.series(tasks, cb);

}

// grant target container oo and target container access role
exports.grant = function(services, content, container, user, cb) {
    var
        tasks = [],
        fileNames;

    logger.logTimerInit('grants-files', "Processing grants files...");

    fileNames = content.synonymGrantorFiles();
    logger.trace('grants files:', fileNames);

    fileNames.forEach(function(fileName) {
        tasks.push(function(cb) {
            grantFile(services, content.root, fileName, container, user, cb);
        });
    });

    tasks.push(logger.logfnTimerDelta('grants-files', "Processing grants files... ok"));

    async.series(tasks, function(err, results) {
        cb(err, {
            task: 'synonym',
            results: results
        });
    });

};
