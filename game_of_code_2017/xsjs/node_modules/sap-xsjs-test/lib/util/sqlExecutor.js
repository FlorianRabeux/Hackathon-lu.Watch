/**
 * Created by D039595 on 31.03.2015.
 */
/**
 * @module sqlExecutor
 */

var tableDataSetFactory = require('./tableDataSet.js')

/**
 * Creates an SqlExecutor object for a given database connection.
 *
 * @example
 *
 * <pre>
 * var SqlExecutor = $.import('sap.hana.testtools.unit.util', 'sqlExecutor').SqlExecutor;
 * var connection = $.db.getConnection();
 * var sqlExecutor = new SqlExecutor(connection);
 * </pre>
 *
 * @class SqlExecutor provides functions for a convenient execution of SQL statements
 * @constructor
 * @param {$.db.Connection}
 *            connection database connection
 */
var SqlExecutor = function(connection) {

    /**
     * @private
     * @ignore
     */
    function throwingErrorHandler(error) {
        throw error;
    }

    /**
     * @private
     * @ignore
     */
    function ignoringErrorHandler(error) {
    }

    /**
     * @private
     * @ignore
     */
    function execSingleWithHandler(sql, errorHandler) {
        var statement = null;
        try {
            statement = connection.prepareStatement(sql);
            statement.execute();
        } catch (e) {
            errorHandler(e);
        } finally {
            if (statement) {
                statement.close();
            }
        }
    }

    /**
     * Executes a common statement.
     *
     * @example
     *
     * <pre>
     * //copies a table into a test schema
     * try {
	 *     sqlExecutor.execSingle('create column table TEST.ORDERS like SAP_HANA_TEST_DEMO.ORDERS with no data');
	 * } finally {
	 *     connection.close();
	 * }
     * </pre>
     *
     * @param {String}
     *            sql common statement that should be executed
     * @throws {SQLException}
     */
    this.execSingle = function(sql) {
        execSingleWithHandler(sql, throwingErrorHandler);
    };

    /**
     * Executes a common statement and ignores any error during execution.
     *
     * @example
     *
     * <pre>
     * //tries to delete a test table if it exists
     * sqlExecutor.execSingleIgnoreFailing('drop table TEST.ORDERS');
     * </pre>
     *
     * @param {String}
     *            sql common statement that should be executed
     */
    this.execSingleIgnoreFailing = function(sql) {
        execSingleWithHandler(sql, ignoringErrorHandler);
    };

    /**
     * Executes a select statement and returns the results.
     *
     * @example
     *
     * <pre>
     * try {
	 *     var actualTableDataSet = sqlExecutor.execQuery('select 1 from dummy');
	 * } finally {
	 *     connection.close();
	 * }
     * </pre>
     *
     * @param {String}
     *            sql select statement that should be executed
     * @returns {module:tableDataSet~TableDataSet} table data set that contains the results of the select statement
     * @throws {SQLException}
     */
    this.execQuery = function(sql) {
        var statement = null;
        var resultSet = null;
        var tableDataSet = null;
        try {
            statement = connection.prepareStatement(sql);
            resultSet = statement.executeQuery();

            tableDataSet = tableDataSetFactory.createFromResultSet(resultSet);
        } catch (e) {
            throwingErrorHandler(e);
        } finally {
            /*
             samir : problem with fibrous.wait
             if (resultSet) {
             resultSet.close();
             }
             */
            if (statement) {
                statement.close();
            }
        }
        return tableDataSet;
    };

    /**
     * Executes a call statement.
     *
     * @example
     *
     * <pre>
     * try {
	 *     sqlExecutor.callProcedure('CALL "SCHEMA"."package.subpackage::procedure"(#InTable,#OutError) with overview');
	 * } finally {
	 *     connection.close();
	 * }
     * </pre>
     *
     * @param {String}
     *            sql call statement that should be executed
     * @throws {SQLException}
     */
    this.callProcedure = function(sql) {
        var callableStatement = null;
        try {
            callableStatement = connection.prepareCall(sql);
            callableStatement.execute();
        } finally {
            callableStatement.close();
        }
    };
};


module.exports = SqlExecutor