'use strict';

/*jslint indent: 2 */

var program = require('commander');

var pjson = require('./package.json');

var deploy = require('./lib/deploy.js');
var options = require('./lib/options.js');
var logger = require('./lib/logger.js');
var fs = require('fs');

//WARN: the default handling for uncaughtException is changed.
//Only the error is printed out instead of the process terminated
/*
process.on('uncaughtException', function(err) {
	logger.log('Caught exception: ' + err);
});*/

var envExit = process.env.EXIT;
var opt = options();

var delay = 10 * 60 * 1000;
function idle() {
  logger.log('Application can be stopped.');
  setTimeout(idle, delay);
}

function exitProgram(exitCode) {
  if (envExit || exitCode) {
    process.exit(exitCode);
  }
  idle();
}

program
  .version(pjson.version)
  .description('You shall run the application with \'npm start\'')
  .option('-t, --trace', 'Set tracing on')
  .option('-o, --output <path>', 'Specify the file path to ouput the compile errors')
  .parse(process.argv);

if (program.trace) {
  logger.setTrace(true);
}

var outputCompileError = false;

if (program.output) {
	try{
		var fsState = fs.statSync(program.output);
		if(fsState.isFile()){
			fs.truncateSync(program.output, 0);
			outputCompileError = true;
		}
		
	}catch(e){
		logger.error(program.output + " Doesn't exist.");
	}
	
}
/**
 * The arguments provided by user are got within the options construction.
 * Add more command parameters here.
 */

deploy(opt, function (err) {
  if (err) {
    logger.error(err);
    if(err.deployPhase && err.deployPhase === 'compile'){
    	for(var idx in err.detail.value){
			var fileName = err.detail.value[idx].value["fileName"].value;
			var col = err.detail.value[idx].value["colNum"].value;
			var line = err.detail.value[idx].value["lineNum"].value;
			var msg = err.detail.value[idx].value["message"].value;
			var userTxt = 'In file ' + fileName + ' , at line :' + line + ' column : ' + col + '. ' + msg;
			logger.error(userTxt);
			if(outputCompileError){
				if(idx > 0){
					fs.appendFileSync(program.output, "\n");
				}
				fs.appendFileSync(program.output, userTxt);
			}
			
		}
    }
  }
  exitProgram(err ? 1 : 0);
});

