/**
 * Cluster managed adapters
 */
'use strict';
module.exports= ToolkitAdapter;

var RpcStruct = require('./RpcStruct.js');
var RpcString = require('./RpcString.js');
var RpcBinary = require('./RpcBinary.js');
var Cluster = require('./Cluster.js');
function ToolkitAdapter() {}

ToolkitAdapter.add = function(rpcContext, workspaceName, adapterName, arc, cb)
{
	var runtime = new RpcStruct();
	runtime.value["arc"] = new RpcBinary(arc);

	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(adapterName);
	arg.value["application-runtime"] = runtime;

	// things that really should come from ccr
	arg.value["application-type"] = new RpcString("toolkit_adapter");


	Cluster.addApplication(rpcContext, arg, cb);
};

ToolkitAdapter.start = function(rpcContext, workspaceName, adapterName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(adapterName);
	Cluster.startApplication(rpcContext, arg, cb);
};

ToolkitAdapter.stop = function(rpcContext, workspaceName, adapterName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(adapterName);
	Cluster.stopApplication(rpcContext, arg, cb);
};

ToolkitAdapter.remove = function(rpcContext, workspaceName, adapterName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(adapterName);
	Cluster.removeApplication(rpcContext, arg, cb);
};

ToolkitAdapter.get = function(rpcContext, workspaceName, adapterName, cb)
{
	var arg = new RpcStruct();

	if (workspaceName != null)
	{
		arg.value["workspace-name"] = new RpcString(workspaceName);
	}

	if (adapterName != null)
	{
		arg.value["application-name"] = new RpcString(adapterName);
	}
	
	arg.value["application-type"] = new RpcString("toolkit_adapter");

	Cluster.getApplications(rpcContext, arg, cb);
};
