/**
 * RpcObject
 */
'use strict';
module.exports = RpcObject; 
var RpcArray = require('./RpcArray.js');
var RpcInteger = require('./RpcInteger.js');
var RpcLong = require('./RpcLong.js');
var RpcNull = require('./RpcNull.js');
var RpcShort = require('./RpcShort.js');
var RpcStruct = require('./RpcStruct.js');
var RpcString = require('./RpcString.js');
var RpcBinary = require('./RpcBinary.js');
var Base64 = require('./Base64.js');

function RpcObject(type)
{
	this.type = type;
}

RpcObject.prototype.isStruct = function()
{
	return false;
};

RpcObject.prototype.isArray = function()
{
	return false;
};

RpcObject.prototype.isNull = function()
{
	return false;
};

RpcObject.prototype.isPrimitive = function()
{
	return false;
};

RpcObject.prototype.asJsonElement = function()
{
};

RpcObject.prototype.toJsonObject = function()
{
	var jsonObject = {};
	jsonObject["type"] = this.type;
	jsonObject["element"] = this.asJsonElement();
	return jsonObject;
};
//Can be accessed via the module, not the object.
RpcObject.fromJsonObject = function(jsonObject)
{
	var type = jsonObject["type"];
	var element = jsonObject["element"];

	if (type == "struct")
	{
		var rpcObject = new RpcStruct();

		for (var key in element)
		{
			if (element.hasOwnProperty(key))
			{
				rpcObject.value[key] = RpcObject.fromJsonObject(element[key]);
			}
		}

		return rpcObject;
	}

	if (type == "array")
	{
		var rpcObject = new RpcArray();

		for (var i = 0; i < element.length; i++)
		{
			rpcObject.value[i] = RpcObject.fromJsonObject(element[i]);
		}

		return rpcObject;
	}

	if (type == "null")
	{
		var rpcObject = new RpcNull();
		return rpcObject;
	}

	if (type == "string")
	{
		var rpcObject = new RpcString(element);
		return rpcObject;
	}

	if (type == "short")
	{
		var rpcObject = new RpcShort(element);
		return rpcObject;
	}

	if (type == "integer")
	{
		var rpcObject = new RpcInteger(element);
		return rpcObject;
	}

	if (type == "long")
	{
		var rpcObject = new RpcLong(element);
		return rpcObject;
	}

	if (type == "binary")
	{
		var value = Base64.decode(element);
		var rpcObject = new RpcBinary(value);
		return rpcObject;
	}

	return null;
};
