/**
 * Project
 */
'use strict';
module.exports= Project;

var RpcStruct = require('./RpcStruct.js');
var RpcString = require('./RpcString.js');
var RpcBinary = require('./RpcBinary.js');
var RpcInteger = require('./RpcInteger.js');
var RpcArray  = require('./RpcArray.js');
var Cluster = require('./Cluster.js');
var RpcUtil = require('./RpcUtil.js');
var logger = require('./logger.js');
var JSZip = require('jszip');

function Project() {}

Project.compile = function(rpcContext, projectName, cclZipContent, cb)
{
	var arg = new RpcStruct();

	arg.value["service-type"] = new RpcString("compiler");
	arg.value["service-method"] = new RpcString("compile");

	var svcArgs = new RpcStruct();
	svcArgs.value["projectName"] = new RpcString(projectName);
	svcArgs.value["projectArchive"] = new RpcBinary(cclZipContent);

	arg.value["service-args"] = svcArgs;
	Cluster.compileProject(rpcContext, arg, function(err, result){
		if(err){
			cb(err, "Failed to compile the project");
		}else{
			if(result.value["service-result"].value["rpc-exception-message"]){
				var stackTrace = result.value["service-result"].value["rpc-exception-stack-trace"];
				var stackTraceStr = JSON.stringify(stackTrace); 
				cb({errFromSvr : stackTraceStr, detail : stackTrace, reason : result.value["service-result"].value["rpc-exception-message"].value}, 'Failed to compile the project');
			}else if(result.value["service-result"].value["compilationResult"].value !== "success"){
				var errorMsg = JSON.stringify(result.value["service-result"].value["compilationErrors"]); 
				cb({deployPhase : 'compile',
					errFromSvr : errorMsg, detail : result.value["service-result"].value["compilationErrors"],
					reason : 'Failed to compile the project'}, '');
			}else{
				//Zipped CCX content
				var ccxZipContent = result.value["service-result"].value["ccxArchive"].value;
				var zip = new JSZip();
				zip.load(ccxZipContent);
				var ccxContent = zip.file(projectName).asText();
				cb(null, ccxContent);
			}	
		}
	});
	
};

Project.add = function(rpcContext, workspaceName, projectName, ccx, ccr, cb)
{	
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);

	var runtime = new RpcStruct();
	runtime.value["ccx"] = new RpcBinary(ccx);

	if (ccr)
	{
		runtime.value["ccr"] = new RpcBinary(ccr);
		arg.value["parse-ccr-deployment"] = new RpcString("true");
	}
	else
	{
		arg.value["application-type"] = new RpcString("project");
	}

	arg.value["application-runtime"] = runtime;

	Cluster.addApplication(rpcContext, arg, function(err, result){
		if(err){
			logger.log(result);
			cb(err, "Failed to add project");
		}else{
			cb(null, "Project is added successfully");
		}
	});
};

Project.start = function(rpcContext, workspaceName, projectName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	Cluster.startApplication(rpcContext, arg, function(err, result){
		if(err){
			logger.log(result);
			cb(err, result);
		}else{
			cb(null, "Project is started successfully");
		}
	});
};

Project.stop = function(rpcContext, workspaceName, projectName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	Cluster.stopApplication(rpcContext, arg, function(err, result){
		if(err){
			logger.log(result);
			cb(err, result);
		}else{
			cb(null, "Project is stopped successfully");
		}
	});
};

Project.startInstance = function(rpcContext, workspaceName, projectName, projectInstance, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	arg.value["application-instance-index"] = new RpcInteger(projectInstance);
	Cluster.startApplication(rpcContext, arg, cb);
};

Project.stopInstance = function(rpcContext, workspaceName, projectName, projectInstance, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	arg.value["application-instance-index"] = new RpcInteger(projectInstance);
	Cluster.stopApplication(rpcContext, arg, cb);
};

Project.remove = function(rpcContext, workspaceName, projectName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	Cluster.removeApplication(rpcContext, arg, function(err, result){
		if(err){
			logger.log(result);
			cb(err, result);
		}else{
			cb(null, "Project is removed successfully");
		}
	});
};

Project.tryStopAndRemove = function(rpcContext, workspaceName, projectName, cb)
{
	var arg = new RpcStruct();
	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	Cluster.stopApplication(rpcContext, arg, function(err, result){
		if(err){
			logger.log('No need to stop SDS module (SDS project) ' + workspaceName + '/' + projectName + ' since it may have been at stopped');
		}else{
			logger.log('Successfully stopped SDS module (SDS project) ' + workspaceName + '/' + projectName);
		}
		removeOnStopped(rpcContext, workspaceName, projectName, function(err, result){
			logger.log('Finished trying to stop and remove SDS module (SDS project) ' + workspaceName + '/' + projectName);
			cb(null, 'Finished trying to stop and remove the project');
		});
	});
};

function removeOnStopped(rpcContext, workspaceName, projectName, cb){
	var delay = 3 * 1000;
	Project.get(rpcContext, null, workspaceName, projectName, function(err, result){
		var apps = result.value["application-list"].value;
		if( apps.length > 0 ) {
			if( apps[0].value['current-status'].value.toLowerCase() !== 'stopped' ){
				setTimeout(removeOnStopped, delay, rpcContext, workspaceName, projectName, cb);
			}else{
				var arg = new RpcStruct();
				arg.value["workspace-name"] = new RpcString(workspaceName);
				arg.value["application-name"] = new RpcString(projectName);
				Cluster.removeApplication(rpcContext, arg, function(err, result){
					if(err){
						logger.log('No need to remove SDS module (SDS project) ' + workspaceName + '/' + projectName + ' since it may do not exist at all');
					}else{
						logger.log('Successfully removed SDS module (SDS project) ' + workspaceName + '/' + projectName);
					}
					cb(null, 'Finished removing the stopped project.');
				});
			}
		}else{
			logger.log('SDS module (SDS project) ' + workspaceName + '/' + projectName + ' does not exist.');
			cb(null, 'The project ' + workspaceName + '/' + projectName + ' does not exist.');
		}
	});
}

Project.get = function(rpcContext, isHa, workspaceName, projectName, cb)
{
	var arg = new RpcStruct();

	if (workspaceName != null)
	{
		arg.value["workspace-name"] = new RpcString(workspaceName);
	}

	if (projectName != null)
	{
		arg.value["application-name"] = new RpcString(projectName);
	}

	if (isHa == true)
	{
		arg.value["application-type"] = new RpcString("ha_project");
	}
	else
	{
		arg.value["application-type"] = new RpcString("project");
	}

	Cluster.getApplications(rpcContext, arg, cb);
};

Project.resolveKeys = function(rpcContext, workspaceName, projectName, instanceNumber, cb){
	
	var arg = new RpcStruct();

	arg.value["workspace-name"] = new RpcString(workspaceName);
	arg.value["application-name"] = new RpcString(projectName);
	arg.value["resolve-type"] = new RpcString("application");
	if (instanceNumber) {
		arg.value["application-instance-index"] = new RpcString(instanceNumber);
	}
	var arrayObj = new RpcArray();
	arrayObj.value[0] = new RpcString("*");
	arg.value["resolve-key-list"] = arrayObj;
	
	Cluster.resolveKeys(rpcContext, arg, cb);

};
/**
 * Without callback(cb), the method is called in a synchronous way
 * @param resolveKeysResult
 * @param key
 * @returns
 */
Project.parseKeyValue = function(resolveKeysResult,key)
{
	if(resolveKeysResult.value["application-keys"] !== undefined)
	{
		return resolveKeysResult.value["application-keys"].value[key].value;
	}
	
	return undefined;
};

Project.startAdapter = function(rpcContext, projectCMDURL, adapterName, cb)
{
	var arg = new RpcStruct();

	arg.value["rpc-url"] = new RpcString(projectCMDURL);
	arg.value["rpc-method"] = new RpcString("cimarron.startConnector");
	var arrayObj = new RpcArray();
	arrayObj.value[0] = new RpcString(rpcContext.getSessionId());
	arrayObj.value[1] = new RpcString(adapterName);
	arg.value["rpc-params"] = arrayObj;
	Cluster.proxy(rpcContext, arg, cb);
};

Project.stopAdapter = function(rpcContext, projectCMDURL, adapterName, cb)
{
	var arg = new RpcStruct();

	arg.value["rpc-url"] = new RpcString(projectCMDURL);
	arg.value["rpc-method"] = new RpcString("cimarron.stopConnector");
	var arrayObj = new RpcArray();
	arrayObj.value[0] = new RpcString(rpcContext.getSessionId());
	arrayObj.value[1] = new RpcString(adapterName);
	arrayObj.value[2] = new RpcInteger(0); //0: immediate stop; 1: non-immediate stop
	arg.value["rpc-params"] = arrayObj;
	Cluster.proxy(rpcContext, arg, cb);
};
