'use strict';
module.exports = Base64;

function Base64() {}


Base64.CHAR_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


Base64.encode = function(bytes)
{
	if (typeof btoa == "function")
	{
		return btoa(bytes);
	}

	var _byte = []; 
	var _char = []; 
	var _result = [];
	var j = 0;
	var i = 0;

	for (i = 0; i < bytes.length; i += 3)
	{
		_byte[0] = bytes.charCodeAt(i);
		_byte[1] = bytes.charCodeAt(i + 1);
		_byte[2] = bytes.charCodeAt(i + 2);
		_char[0] = _byte[0] >> 2;
		_char[1] = ((_byte[0] & 3) << 4) | (_byte[1] >> 4);
		_char[2] = ((_byte[1] & 15) << 2) | (_byte[2] >> 6);
		_char[3] = _byte[2] & 63;

		if (isNaN(_byte[1]))
		{
			_char[2] = _char[3] = 64;
		}
		else if (isNaN(_byte[2]))
		{
			_char[3] = 64;
		}

		_result[j++] = Base64.CHAR_MAP.charAt(_char[0])
				     + Base64.CHAR_MAP.charAt(_char[1])
				     + Base64.CHAR_MAP.charAt(_char[2])
				     + Base64.CHAR_MAP.charAt(_char[3]);
	}

	return _result.join("");
};

Base64.decode = function(str)
{
	if (typeof atob == "function")
	{
		return atob(str);
	}

	var _byte = []; 
	var _char = []; 
	var _result = [];
	var j = 0;
	var i = 0;
	
	while ((str.length % 4) != 0)
	{
		str += "=";
	}

	for (i = 0; i < str.length; i += 4)
	{
		_char[0] = Base64.CHAR_MAP.indexOf(str.charAt(i));
		_char[1] = Base64.CHAR_MAP.indexOf(str.charAt(i + 1));
		_char[2] = Base64.CHAR_MAP.indexOf(str.charAt(i + 2));
		_char[3] = Base64.CHAR_MAP.indexOf(str.charAt(i + 3));
		_byte[0] = (_char[0] << 2) | (_char[1] >> 4);
		_byte[1] = ((_char[1] & 15) << 4) | (_char[2] >> 2);
		_byte[2] = ((_char[2] & 3) << 6) | _char[3];
		_result[j++] = String.fromCharCode(_byte[0]);

		if (_char[2] != 64)
		{
			_result[j++] = String.fromCharCode(_byte[1]);
		}

		if (_char[3] != 64)
		{
			_result[j++] = String.fromCharCode(_byte[2]);
		}
	}

	return _result.join("");
};