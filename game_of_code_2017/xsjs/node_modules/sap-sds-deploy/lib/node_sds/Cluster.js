/**
 * Cluster
 */
'use strict';
module.exports= Cluster;

var RpcStruct = require('./RpcStruct.js');
var RpcString = require('./RpcString.js');
var logger = require('./logger.js');
function Cluster() {}

/*
 * props = {
 *           isreference : "true"/"false",
 *           connectionclass : {value : xxxx, protected : "true"/"false"},
 *           driverlibrary  :  {value : xxxx, protected : "true"/"false"},
 *           dsn :             {value : xxxx, protected : "true"/"false"},
 *           user :            {value : xxxx, protected : "true"/"false"},
 *           password :        {value : xxxx, protected : "true"/"false"},
 *           //The folliwings are special for HANA service
 *           hanahostname :    {value : xxxx, protected : "true"/"false"},
 *           hanainstance :    {value : xxxx, protected : "true"/"false"},
 *           hanadbname   :    {value : xxxx, protected : "true"/"false"},
 *           usedefaulthanaserver :    {value : xxxx, protected : "true"/"false"},
 *           usessl       :    {value : xxxx, protected : "true"/"false"},
 *           useutf8string:    {value : xxxx, protected : "true"/"false"}
 *          };
 * */
function createDataServcieRpcStruct(dataService, workspace, props)
{
	var arg = new RpcStruct();
	arg.value["dataservice-name"] = new RpcString(dataService);
	if( workspace ){
		arg.value["workspace-name"] = new RpcString(workspace);
	}
	
	//Attributes
	var attributes = new RpcStruct();
	if(props.isreference){
		attributes.value["isreference"] = new RpcString(props.isreference);
	}
	attributes.value["type"] = new RpcString("db");
	arg.value["dataservice-attributes"] = attributes;
	
	//properties
	var properties = new RpcStruct();
	if(props.connectionclass){
		var connectionclass = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.connectionclass.value);
		connectionclass.value["default-value"] = defaultValue;
		if(props.connectionclass.protected){
			connectionclass.value["protected"] = new RpcString(props.connectionclass.protected);
		}else{
			connectionclass.value["protected"] = new RpcString("false");
		}
		properties.value["connectionclass"] = connectionclass;
	}
	
	if(props.dsn){
		var dsn = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.dsn.value);
		dsn.value["default-value"] = defaultValue;
		if(props.dsn.protected){
			dsn.value["protected"] = new RpcString(props.dsn.protected);
		}else{
			dsn.value["protected"] = new RpcString("false");
		}
		properties.value["dsn"] = dsn;
	}
	
	var driverlibrary = new RpcStruct();
	
	var defaultValue = new RpcStruct();
	defaultValue.value["type"] = new RpcString("string");
	defaultValue.value["value"] = new RpcString(props.driverlibrary.value);
	driverlibrary.value["default-value"] = defaultValue;
	if(props.driverlibrary.protected){
		driverlibrary.value["protected"] = new RpcString(props.driverlibrary.protected);
	}else{
		driverlibrary.value["protected"] = new RpcString("false");
	}
	properties.value["driverlibrary"] = driverlibrary;
	
	var user = new RpcStruct();
	
	var defaultValue = new RpcStruct();
	defaultValue.value["type"] = new RpcString("string");
	defaultValue.value["value"] = new RpcString(props.user.value);
	user.value["default-value"] = defaultValue;
	if(props.user.protected){
		user.value["protected"] = new RpcString(props.user.protected);
	}else{
		user.value["protected"] = new RpcString("false");
	}
	properties.value["user"] = user;
	
	var password = new RpcStruct();
	
	var defaultValue = new RpcStruct();
	defaultValue.value["type"] = new RpcString("string");
	defaultValue.value["value"] = new RpcString(props.password.value);
	password.value["default-value"] = defaultValue;
	if(props.password.protected){
		password.value["protected"] = new RpcString(props.password.protected);
	}else{
		password.value["protected"] = new RpcString("false");
	}
	properties.value["password"] = password;
	
	if(props.hanahostname){
		var hanahostname = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.hanahostname.value);
		hanahostname.value["default-value"] = defaultValue;
		if(props.hanahostname.protected){
			hanahostname.value["protected"] = new RpcString(props.hanahostname.protected);
		}else{
			hanahostname.value["protected"] = new RpcString("false");
		}
		properties.value["hanahostname"] = hanahostname;
	}
	
	if(props.hanainstance){
		var hanainstance = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.hanainstance.value);
		hanainstance.value["default-value"] = defaultValue;
		if(props.hanainstance.protected){
			hanainstance.value["protected"] = new RpcString(props.hanainstance.protected);
		}else{
			hanainstance.value["protected"] = new RpcString("false");
		}
		properties.value["hanainstance"] = hanainstance;
	}
	
	if(props.hanadbname){
		var hanadbname = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.hanadbname.value);
		hanadbname.value["default-value"] = defaultValue;
		if(props.hanadbname.protected){
			hanadbname.value["protected"] = new RpcString(props.hanadbname.protected);
		}else{
			hanadbname.value["protected"] = new RpcString("false");
		}
		properties.value["hanadbname"] = hanadbname;
	}
	
	if(props.usedefaulthanaserver){
		var usedefaulthanaserver = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.usedefaulthanaserver.value);
		usedefaulthanaserver.value["default-value"] = defaultValue;
		if(props.usedefaulthanaserver.protected){
			usedefaulthanaserver.value["protected"] = new RpcString(props.usedefaulthanaserver.protected);
		}else{
			usedefaulthanaserver.value["protected"] = new RpcString("false");
		}
		properties.value["usedefaulthanaserver"] = usedefaulthanaserver;
	}
	
	if(props.usessl){
		var usessl = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.usessl.value);
		usessl.value["default-value"] = defaultValue;
		if(props.usessl.protected){
			usessl.value["protected"] = new RpcString(props.usessl.protected);
		}else{
			usessl.value["protected"] = new RpcString("false");
		}
		properties.value["usessl"] = usessl;
	}
	
	
	if(props.useutf8string){
		var useutf8string = new RpcStruct();
		
		var defaultValue = new RpcStruct();
		defaultValue.value["type"] = new RpcString("string");
		defaultValue.value["value"] = new RpcString(props.useutf8string.value);
		useutf8string.value["default-value"] = defaultValue;
		if(props.useutf8string.protected){
			useutf8string.value["protected"] = new RpcString(props.useutf8string.protected);
		}else{
			useutf8string.value["protected"] = new RpcString("false");
		}
		properties.value["useutf8string"] = useutf8string;
	}
	
	
	arg.value["dataservice-properties"] = properties;
	
	return arg;
}

/*
 * props = {
 *           user :            {value : xxxx, protected : "true"/"false"},
 *           password :        {value : xxxx, protected : "true"/"false"},
 *           //The folliwings are special for HANA service
 *           hanahostname :    {value : xxxx, protected : "true"/"false"},
 *           hanainstance :    {value : xxxx, protected : "true"/"false"},
 *           hanadbname   :    {value : xxxx, protected : "true"/"false"},
 *           usedefaulthanaserver :    {value : xxxx, protected : "true"/"false"},
 *           usessl       :    {value : xxxx, protected : "true"/"false"},
 *           useutf8string:    {value : xxxx, protected : "true"/"false"}
 *          };
 * */
Cluster.addHANAService = function(rpcContext, dataService, workspace, props, cb)
{
	props.isreference = "true";
	props.connectionclass = {value : "HANA"};
	props.driverlibrary = {value : "streamingdbhana_lib"};
	Cluster.addDataService(rpcContext, dataService, workspace, props, cb);
};


/*
 * props = {
 *           isreference : "true"/"false",
 *           connectionclass : {value : xxxx, protected : "true"/"false"},
 *           driverlibrary  :  {value : xxxx, protected : "true"/"false"},
 *           dsn :             {value : xxxx, protected : "true"/"false"},
 *           user :            {value : xxxx, protected : "true"/"false"},
 *           password :        {value : xxxx, protected : "true"/"false"},
 *           //The folliwings are special for HANA service
 *           hanahostname :    {value : xxxx, protected : "true"/"false"},
 *           hanainstance :    {value : xxxx, protected : "true"/"false"},
 *           hanadbname   :    {value : xxxx, protected : "true"/"false"},
 *           usedefaulthanaserver :    {value : xxxx, protected : "true"/"false"},
 *           usessl       :    {value : xxxx, protected : "true"/"false"},
 *           useutf8string:    {value : xxxx, protected : "true"/"false"}
 *          };
 * */
Cluster.addDataService = function(rpcContext, dataService, workspace, props, cb)
{
	var arg = createDataServcieRpcStruct(dataService, workspace, props);
	rpcContext.execute("Cluster.addDataService", arg, function(err, result){
		if(err){
			cb(err, 'An error occured to add an data service');
		}else{
			var sdsWorkspace = "";
			if(workspace){
				sdsWorkspace = workspace;
			}
			logger.log('An HANA data service '+ sdsWorkspace + '/' + dataService  +' is added to Streaming cluster.');
			cb(null, result);
		}
	});
};

Cluster.removeDataService = function(rpcContext, dataService, workspace, cb)
{
	var arg = new RpcStruct();
	arg.value["dataservice-name"] = new RpcString(dataService);
	if( workspace ){
		arg.value["workspace-name"] = new RpcString(workspace);
	}
	rpcContext.execute("Cluster.removeDataService", arg, function(err, result){
		if(err){
			cb(err, 'An error occured to remove an data service');
		}else{
			var sdsWorkspace = "";
			if(workspace){
				sdsWorkspace = workspace;
			}
			logger.log('An HANA data service '+ sdsWorkspace + '/' + dataService  +' is removed from Streaming cluster.')
			cb(null, result);
		}
	});
};

Cluster.getDataService = function(rpcContext, dataService, workspace, cb)
{
	var arg = new RpcStruct();
	if( dataService ){
		arg.value["dataservice-name"] = new RpcString(dataService);
	}
	if( workspace ){
		arg.value["workspace-name"] = new RpcString(workspace);
	}
	rpcContext.execute("Cluster.getDataServices", arg, function(err, result){
		if(err){
			cb(err, 'An error occured to get info for data service');
		}else{
			cb(null, result);
		}
	});
};

Cluster.addWorkspace = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.addWorkspace", arg, cb);
};

Cluster.removeWorkspace = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.removeWorkspace", arg, cb);
};

Cluster.proxy = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.proxy", arg, cb);
};

Cluster.getWorkspaces = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.getWorkspaces", arg, cb);
};

Cluster.compileProject = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.executeService", arg, cb);
};

Cluster.addApplication = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.addApplication", arg, cb);
};

Cluster.removeApplication = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.removeApplication", arg, cb);
};

Cluster.startApplication = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.startApplication", arg, cb);
};

Cluster.stopApplication = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.stopApplication", arg, cb);
};

Cluster.getApplications = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.getApplications", arg, cb);
};

Cluster.resolveKeys = function(rpcContext, arg, cb)
{
	rpcContext.execute("Cluster.resolveKeys", arg, cb);
};

Cluster.readConfig = function(rpcContext, cb)
{
	var arg = new RpcStruct();

	rpcContext.execute("Cluster.readConfig", arg, cb);
};

Cluster.writeConfig = function(rpcContext, clusterConfig, clusterConfigComment, cb)
{
	var arg = new RpcStruct();

	if (clusterConfig != null)
	{
		arg.value["cluster-config"] = new RpcString(clusterConfig);
	}

	if (clusterConfigComment != null)
	{
		arg.value["cluster-config-comment"] = new RpcString(clusterConfigComment);
	}
	rpcContext.execute("Cluster.writeConfig", arg, cb);
};
