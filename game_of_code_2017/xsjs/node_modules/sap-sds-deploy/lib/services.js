'use strict';

/*jslint indent: 2 */
var logger = require('./logger.js');
var xsenv = require('sap-xsenv');

var services = xsenv.filterCFServices(function (service) {
  if (service.tags && service.tags.indexOf('sds') !== -1) {
    return true;
  }
  if (service.label === 'user-provided' && service.credentials.tags && service.credentials.tags.indexOf('sds') !== -1) {
    return true;
  }
  return false;
});

function getTargetService( ) {
     switch (services.length) {
	 case 0:
		 logger.error('no sds service instance found');
		 return null;
	 case 1:
	    return services[0];
	 default:
	    throw new Error('more than one sds service instances found');
	 }
}

function getRESTPoint(options) {
  var sdsService = getTargetService();
  var ssl = false;
  if(!sdsService){
	  if(options.ssl && /^true$/i.test(options.ssl)){
		  ssl = true;
	  }
	  return{host: options.host, port: options.port, ssl: ssl};
  }else{
	  var url = sdsService.credentials.url;
	  ssl = /^https/i.test(url);
	  var index = url.search('//');
	  var hostPort = url.substring(index+2);
	  var strs = hostPort.split(':');
	  return{host: strs[0], port: strs[1], ssl: ssl};
  }
}

function getCreds(options) {
	var sdsService = getTargetService();
	if(!sdsService){
		  return{username: options.username, password: options.password};
	  }else{
		  var credentials = sdsService.credentials;
		  return{username: credentials.user, password: credentials.password};
	  }
}

function getSDSWorkspace(options){
	var sdsService = getTargetService();
	if(!sdsService){
		  return{workspace: options.workspaceName};
	  }else{
		  var credentials = sdsService.credentials;
		  return{workspace: credentials.workspace};
	  }
}

function getHDIService(){
	return xsenv.filterCFServices({label: "hana", tag: "hana"});
}

module.exports = {
  getRESTPoint: getRESTPoint,
  getCreds    : getCreds,
  getSDSWorkspace: getSDSWorkspace,
  getHDIService : getHDIService
};
