'use strict';

/*jslint indent: 2 */

var fs = require('fs');
var path = require('path');

var fileWalker = require('./fileWalker.js');

var pathSep = '/';
var dummyBuffer = new Buffer(0);

var util = require('util');

// replace platform path separator with hdi path separator
function linuxPath(p) {
  if (path.sep === pathSep) {
    return p;
  }
  return p.split(path.sep).join(pathSep);
}

function deployDirPath(dir) {
  return linuxPath(dir) + pathSep;
}


function deployFileContent(sdsProjectDir, file) {
  var p = path.join(sdsProjectDir, file);
  return fs.createReadStream(p);
}

module.exports = function (sdsProjectDir) {
  var
    cclFiles = [],
    ccrFiles = [];

  function addFile(file) {
    if ( path.extname(file) === '.ccl' ) {
    	cclFiles.push(file);
    }else if ( path.extname(file) === '.ccr' ){
    	ccrFiles.push(file);
    }
  }

  fileWalker.walk(sdsProjectDir, addFile);

  return {
    cclFiles: cclFiles,
    ccrFiles: ccrFiles,
    deployContent: function () {
      return [].concat(
        [deployDirPath(sdsProjectDir), dummyBuffer],
        cclFiles.map(function (file) {return [file, deployFileContent(sdsProjectDir, file)]; }),
        ccrFiles.map(function (file) {return [file, deployFileContent(sdsProjectDir, file)]; })
      );
    }
  };
};
