var async = require('async');

var metadata = require('./metadata');
var manager = require('./manager');
var queries = require("./cds-queries");
var SqlQuery = queries.Query;
var transaction = require('./transaction');


// transactions

// returns connected DB client
exports.$getTransaction = function (dbconn, callback) {
    if (typeof callback === "undefined") {
        callback = dbconn;
        dbconn = null;
    }
    transaction.getClient(dbconn, function(err, client) {
        if (err)
            return callback(err);
        client.$get = function (entity, key, callback) {
            manager._get(client, entity, key, callback);
        };
        client.$find = function (entity, condition, callback) {
            manager._find(client, entity, condition, callback);
        };
        client.$save = function (instance, callback) {
            manager._save(client, instance, callback);
        };
        client.$discard = function (instance, callback) {
            manager._discard(client, instance, callback);
        };
        client.$getAll = function (refs, callback) {
            var getter = function (ref, cb) {
                manager._get(client, ref.$entity, ref, cb);
            };
            async.map(refs, getter, callback);
        };
        client.$findAll = function (refs, callback) {
            var finder = function (ref, cb) {
                manager._find(client, ref.$entity, ref, cb);
            };
            async.map(refs, finder, callback);
        };
        client.$saveAll = function (refs, callback) {
            var saver = function(ref, cb) {
                manager._save(client, ref, cb);
            };
            async.map(refs, saver, callback);
        };
        client.$discardAll = function (refs, callback) {
            var discarder = function(ref, cb) {
                manager._discard(client, ref, cb);
            };
            async.map(refs, discarder, function(err) { callback(err); });
        };
        client.$delete = function(entity, condition, callback) {
            manager._delete(client, entity, condition, callback);
        };
        client.$setAutoCommit = function (auto) {
            transaction._autoCommit(client, auto);
        };
        client.$commit = function (callback) {
            transaction._commit(client, callback);
        };
        client.$rollback = function (callback) {
            transaction._rollback(client, callback);
        };
        client.$close = function() {
            transaction.releaseClient(client, dbconn);
        };
        callback(err, client);
    });
};


// imports

// batch-import (main API function)
exports.$importEntities = function(refs, opts, callback) {
    if (typeof callback === "undefined") {
        callback = opts;
        opts = {};
    }
    metadata._import(refs, opts, function (error, entities) {
        for (var name in entities)
            if (entities[name])
                addXSInterface(entities[name]);
        callback(error, entities);
    });
}

exports.$importEntity = function(ref, callback) {
    exports.$importEntities([ref], callback);
};

// (async) retrieve entity object by name
// NOTE: callback will never be invoked if entity is not imported!
exports.$getEntity = function(entityName, callback) {
    metadata.getEntity(entityName, callback);
};
exports.$getEntities = function(entityNames, callback) {
    var getter = function (name, cb) {
        exports.$getEntity(name, cb);
    };
    async.map(entityNames, getter, callback);
};

// retrieve entity object by name
// NOTE: returns null if entity import has not completed yet
exports.$getEntitySync = function(entityName) {
    return metadata.getEntitySync(entityName);
};


// instance management

function addXSInterface(entity) {
    // batch operations
    entity.$prepare = function(value) {
        value.$entity = entity;
        return value;
    };
    // general queries
    entity.$query = function(client) {
        var param = {};
        param["t0"] = { entity: entity };
        return new SqlQuery(client, param);
    };
}


// internal API

exports._clearCaches = manager._clearCaches;
exports._clearImports = metadata._clearImports;


// additional API functions

exports.Query = SqlQuery;
exports.createQuery = queries.createQuery;
exports.$par = function(id) {
    return new queries.Par(id);
};


// deprecated API names

exports.importEntities = exports.$importEntities;
exports.importEntity = exports.$importEntity;
exports.get = exports.$get;
exports.save = exports.$save;
exports.queries = queries;
exports.extensionPoints = manager.extensionPoints; // hook for extenders
exports.xsjs = function(conn, callback) {
    exports.$getTransaction(conn._client, function(err, tx) {
        if (err) {
            callback(err);
        } else {
            var xsjscds = require("./xsjs-cds").init(tx);
            callback(null, xsjscds);
        }
    });
}.sync;
