'use strict';

var URI = require('urijs');
var urlUtils = require('../utils/url-utils');
var loggerUtils = require('../utils/logger');
var backendRequestOptions = require('../backend-request/options');
var uaaUtils = require('../utils/uaa-utils');

module.exports = {
  sessionTimeoutLogout: function(session, routerConfig) {
    if (session.user) {
      module.exports.callBackendLogoutPaths(null, routerConfig, session.user.token);
    }
  },

  centralLogout: function(req, res) {
    var routerConfig = req.app.get('routerConfig');

    module.exports.callBackendLogoutPaths(req, routerConfig);

    req.session.destroy();
    res.removeHeader('set-cookie');
    module.exports.triggerUAARedirect(req, res, routerConfig);
  },

  callBackendLogoutPaths: function(req, routerConfig, oauthToken) {
    var destinations = routerConfig.appConfig.destinations || {};

    for (var destinationName in destinations) {
      var destinationOptions = destinations[destinationName];
      if (destinationOptions.logoutPath) {
        var destination = routerConfig.destinations[destinationName];
        var logoutUri = urlUtils.join(destination.url, destinationOptions.logoutPath);
        var request = backendRequestOptions.getLogoutRequest(req, oauthToken, destination, destinationOptions);
        sendRequest(request, destination, logoutUri);
      }
    }
  },

  triggerUAARedirect: function(req, res, routerConfig) {
    var redirectUrl = resolveLogoutRedirectUrl(req, routerConfig);
    res.writeHead(302, { Location: redirectUrl });
    res.end();
  }
};

function sendRequest(request, destination, logoutUri) {
  var logger = loggerUtils.getLogger('/Middleware');
  var tracer = loggerUtils.getTracer();

  var clientReq = request();
  if (destination.timeout) {
    clientReq.setTimeout(destination.timeout);
  }
  clientReq.on('timeout', function () {
    clientReq.abort();
    logger.error('Request to %s failed with a timeout', logoutUri);
  });
  clientReq.on('error', function (err) {
    logger.error(err, 'Error in request to %s', logoutUri);
  });
  clientReq.on('response', function (resp) {
    if (destination.timeout) {
      resp.setTimeout(destination.timeout);
    }
    resp.on('timeout', function () {
      clientReq.abort();
      logger.error('Request to %s failed with a timeout', logoutUri);
    });
    resp.on('error', function (err) {
      logger.error(err, 'Error in response from %s', logoutUri);
    });
    var body = '';
    resp.on('data', function (chunk) {
      body += chunk;
    });
    resp.on('end', function () {
      if (resp.statusCode !== 200) {
        logger.error('Status %d received for request to %s, body: %s', resp.statusCode, logoutUri, body);
      }
      tracer.info('Status %d received for request to %s, body: %s', resp.statusCode, logoutUri, body);
    });
  });
  clientReq.end();
}

function resolveLogoutRedirectUrl(req, routerConfig) {
  // Currently redirect from UAA to application is possible only with port-based routing
  var uaaUrl = uaaUtils.getUaaUrl(routerConfig, urlUtils.getAppRouterHost(req));
  var redirectUrl = urlUtils.join(uaaUrl, routerConfig.uaaOptions.logoutEndpoint);
  var logoutPage = routerConfig.appConfig.logout.logoutPage;
  if (!logoutPage) {
    return redirectUrl;
  }
  var uri = URI.parse(logoutPage);
  if (uri.protocol && uri.hostname) {
    return redirectUrl + '?redirect=' + logoutPage;
  }
  var appRouterUrl = urlUtils.buildAppRouterUrl(req);
  return redirectUrl + '?redirect=' + urlUtils.join(appRouterUrl, logoutPage);
}
