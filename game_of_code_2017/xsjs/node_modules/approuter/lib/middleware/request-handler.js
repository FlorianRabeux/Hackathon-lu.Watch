'use strict';

var VError = require('verror').VError;

var cookieHandler = require('../backend-response/cookie-handler');
var backendOptions = require('../backend-request/options');
var traceUtil = require('../utils/trace-util');

module.exports = function requestHandler(req, res, next) {
  var url = req.internalUrl;
  if (!url) {
    return next();
  }

  var backendRequest = backendOptions.getRequest(req);
  var clientReq = backendRequest();

  if (url.destination.timeout) {
    clientReq.setTimeout(url.destination.timeout);
  }
  clientReq.on('timeout', function () {
    clientReq.abort();
    returnGateWayError(504, next, new VError('Request to %s failed with a timeout', url.href));
  });
  clientReq.on('error', function (err) {
    returnGateWayError(502, next, new VError(err, 'error while forwarding request to %s', url.href));
  });
  req.on('error', function (err) {
    returnGateWayError(502, next, new VError(err, 'error in reading from incoming request while forwarding to %s', url.href));
  });
  req.pipe(clientReq);

  clientReq.on('response', function(clientRes) {
    onResponse(req, res, clientReq, clientRes, next);
  });
};

function onResponse(req, res, clientReq, clientRes, next) {
  var tracer = req.loggingContext.getTracer();

  traceUtil.traceBackendResponse(tracer, clientRes);
  var backendCookies = cookieHandler.processCookies(clientRes.headers['set-cookie']);
  if (req.session && backendCookies.sessionCookies.length > 0) {
    cookieHandler.storeSessionCookies(backendCookies.sessionCookies, req);
  }
  for (var headerName in clientRes.headers) {
    if (headerName === 'set-cookie') {
      backendCookies.nonSessionCookies.length && res.setHeader(headerName, backendCookies.nonSessionCookies);
    } else {
      res.setHeader(headerName, clientRes.headers[headerName]);
    }
  }
  res.statusCode = clientRes.statusCode;
  res.statusMessage = clientRes.statusMessage;
  var url = req.internalUrl;
  if (url.destination.timeout) {
    clientRes.setTimeout(url.destination.timeout);
  }
  clientRes.on('timeout', function() {
    clientReq.abort();
    returnGateWayError(504, next, new VError('Response from %s failed with a timeout', url.href));
  });
  clientRes.on('error', function(err) {
    returnGateWayError(502, next, new VError(err, 'error while reading from incoming response (backend request to %s)', url.href));
  });
  res.on('error', function(err) {
    returnGateWayError(502, next, new VError(err, 'error while sending data to outgoing response (backend request to %s)', url.href));
  });
  traceUtil.traceOutgoingResponse(tracer, res);
  clientRes.pipe(res);
}

function returnGateWayError(status, next, err) {
  err.status = status;
  next(err);
}
