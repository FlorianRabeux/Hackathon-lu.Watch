'use strict';
var cookie = require('cookie');
var cookieUtils = require('../utils/cookie-utils');
var passport = require('passport');
var url = require('url');
var VError = require('verror').VError;
var xhr = require('../xhr-login/xhr');

module.exports = function passportLogin(req, res, next) {
  if (req.method !== 'GET') {
    return next();
  }
  passport.authenticate('oauth2', function (err, user) {
    if (err) {
      if (err.oauthError) {
        err.message += ': ' + err.oauthError.message;
        err.code = err.code || err.oauthError.code;
      }
      var uaaUrl = req.app.get('routerConfig').uaaOptions.url;
      return next(new VError(err, 'Could not authenticate with UAA at %s', uaaUrl));
    }
    if (!user) {
      res.writeHead(302, { location: '/' });
      res.end();
      return;
    }
    req.logIn(user, function (err) {
      if (err) {
        return next(err);
      }
      if (xhr.isXhrLogin(req)) {
        return xhr.sendLoginSuccessHtml(res);
      }

      var redirectCookieName = cookieUtils.getRedirectLocationCookieName();

      if (!req.headers || !req.headers.cookie) {
        return sendRedirectCookieMissing(next, redirectCookieName);
      }

      var cookies = cookie.parse(req.headers.cookie);
      var redirectCookieValue = cookies[redirectCookieName];
      if (!redirectCookieValue) {
        return sendRedirectCookieMissing(next, redirectCookieName);
      }

      if (!isRelativeUrl(redirectCookieValue)) {
        return sendRedirectCookieError(next, 'Redirect path is invalid',
          new VError('%s must contain a relative path, got %s', redirectCookieName, redirectCookieValue));
      }

      var locationAfterLogin = cookie.serialize(redirectCookieName, '', { path: '/', maxAge: 0 });
      cookieUtils.setCookie(res, locationAfterLogin);

      var redirectLocation = normalizeRelativePath(redirectCookieValue);
      res.writeHead(302, { location: redirectLocation });
      res.end();
    });
  })(req, res, next);
};

function isRelativeUrl(location) {
  var parsedUrl = url.parse(location);
  return !(parsedUrl.host || parsedUrl.protocol);
}

function sendRedirectCookieMissing(next, cookieName) {
  sendRedirectCookieError(next, 'Missing redirect information', new VError('Required cookie \'%s\' is missing in the request', cookieName));
}

function sendRedirectCookieError(next, message, err) {
  var error = new VError(err, 'Unable to redirect after successful authentication. %s.', message);
  error.status = 400;
  next(error);
}

// normalize path, so it will not lead to unexpecred redirect like '//google.com' for example
function normalizeRelativePath(path) {
  return path.trim().replace(/^\/*/, '/');
}
