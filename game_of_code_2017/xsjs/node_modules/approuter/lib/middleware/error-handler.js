'use strict';

var http = require('http');
var util = require('util');
var xhr = require('../xhr-login/xhr');

var CONNECTION_ERROR_CODES = {
  ECONNRESET: true,
  ECONNREFUSED: true
};

module.exports = function errorHandler(err, req, res, next) { // eslint-disable-line no-unused-vars
  var status = err.status || 500;
  var headers = err.headers || {};
  var tracer = req.loggingContext.getTracer();
  var logger = req.loggingContext.getLogger('/Handler');

  logger.error('%s request to %s completed with status %d - %s', req.method, req.url, status, err.message);
  tracer.debug(err);
  if (CONNECTION_ERROR_CODES[findErrCode(err)]) {
    tracer.info('Check your proxy and network settings.');
  }

  if (xhr.isXhrLogin(req)) {
    logger.info('Sending xhr login response html');
    return xhr.sendLoginErrorHtml(res, err);
  }
  endRequest(res, status, headers, err);
};

function endRequest(res, status, headers, err) {
  if (!res.headersSent) {
    res.writeHead(status, headers);
    var message = http.STATUS_CODES[status];
    if (err && process.env.NODE_ENV === 'development') {
      message = util.format('%d: %s\t%s', status, message, err.stack);
    }
    res.end(message);
  }
}

function findErrCode(err) {
  if (!err) {
    return;
  }
  if ('code' in err) {
    return err.code;
  }
  if (typeof err.cause === 'function') {
    return findErrCode(err.cause());
  }
}
