'use strict';

var _ = require('lodash');
var url = require('url');
var headerUtil = require('../utils/header-util');
var pathUtil = require('../utils/path-util');

var hopByHopHeaders = ['connection', 'keep-alive',
  'public',
  'proxy-authenticate',
  'transfer-encoding',
  'upgrade',
  'sec-websocket-key'];

var blacklistedHeaders = ['host'];

exports.getHeaders = function (req, oauthToken, destination) {
  var headers;
  if (req) {
    headers = _.cloneDeep(req.headers);
    oauthToken = oauthToken || (req.session && req.session.user && req.session.user.token);
    destination = destination || req.internalUrl.destination;

    removeHeaders(headers, hopByHopHeaders);
    addXForwardingHeaders(headers, req);
    // remove the header after it is used to create the XForwardingHeaders
    removeHeaders(headers, blacklistedHeaders);
    removeCsrfTokenHeader(headers, req);
    headerUtil.updateSapPassport(headers);
  }

  return addOauthHeader(headers || {}, oauthToken, destination);
};

function removeCsrfTokenHeader(headers, req) {
  if (!pathUtil.isPublicPath(req) && pathUtil.isCsrfProtectionEnabled(req)) {
    delete headers['x-csrf-token'];
  }
}

function removeHeaders(headers, collection) {
  collection.forEach(function(property) {
    delete headers[property];
  });
}

function addOauthHeader(headers, oauthToken, destination) {
  if (oauthToken && destination && !!destination.forwardAuthToken) {
    headers.authorization = 'Bearer ' + oauthToken.accessToken;
  }
  return headers;
}

function addXForwardingHeaders(headers, req) {
  if (headers.host) {
    headers['x-forwarded-host'] = headers.host;
  }
  if (!headers['x-forwarded-proto'] && req.protocol) {
    headers['x-forwarded-proto'] = req.protocol;
  }
  if (!headers['x-forwarded-for']) {
    headers['x-forwarded-for'] = req.connection.remoteAddress;
  }
  if (!headers['x-forwarded-path']) {
    headers['x-forwarded-path'] = url.parse(req.url).pathname;
  }
}
