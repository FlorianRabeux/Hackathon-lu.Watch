'use strict';

var _ = require('lodash');

var appConfig = require('./configuration/app-config');
var environment = require('./environment');
var environmentConfig = require('./configuration/env-config');
var uaaUtils = require('./utils/uaa-utils');

module.exports = function getConfig(parameters) {
  var workingDir = environment.getWorkingDirectory(parameters.workingDir);

  var envConfig = environmentConfig.load(workingDir);
  var uaaOptions = uaaUtils.getOptions(workingDir);
  var routerConfig = {
    serverPort: environment.getPort(parameters.port),
    workingDir: workingDir,
    uaaOptions: uaaOptions,
    appConfig: appConfig.loadConfiguration(workingDir, parameters.xsappConfig || 'xs-app.json', envConfig.destinations, uaaOptions.xsappname)
  };

  mergeConfiguration(routerConfig, envConfig);
  routerConfig.appConfig.mergePluginsIntoRoutes(routerConfig.plugins);

  return routerConfig;
};

function mergeConfiguration(routerConfig, envConfig) {
  routerConfig.sessionTimeout = envConfig.sessionTimeout || routerConfig.appConfig.sessionTimeout;
  delete routerConfig.appConfig.sessionTimeout;

  if (routerConfig.uaaOptions.tenantmode === 'shared' && !envConfig.tenantHostPattern) {
    throw new Error('UAA tenant mode is shared, but environment variable TENANT_HOST_PATTERN is not set');
  }

  routerConfig.appConfig.compression = routerConfig.appConfig.compression || {};
  _.merge(routerConfig.appConfig.compression, envConfig.compression);

  envConfig = _.omit(envConfig, ['sessionTimeout', 'compression']);
  routerConfig = _.merge(routerConfig, envConfig);

  return routerConfig;
}