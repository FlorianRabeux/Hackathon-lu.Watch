'use strict';

var jwtDecode = require('jwt-decode');
var headerUtil = require('../utils/header-util');
var urlUtils = require('../utils/url-utils');
var uaaUtils = require('../utils/uaa-utils');

module.exports = {
  storeToken: function(req, accessToken, refreshToken, params, profile, done) {
    req.session.regenerate(function(err) {
      var options = { accessToken: accessToken, refreshToken: refreshToken, expiresIn: params.expires_in, scope: params.scope };

      req.session.user = module.exports.getUserProperties(options);
      req.session.save();

      var user = { name: 'approuter does not require that, but passport does' };
      done(err, user);
    });
  },

  getUserProperties: function(options) {
    return {
      name: jwtDecode(options.accessToken).user_name,
      token: {
        accessToken: options.accessToken,
        expiryDate: module.exports.getExpiresAt(options.expiresIn).getTime(),
        refreshToken: options.refreshToken
      },
      scopes: options.scope ? options.scope.trim().split(' ') : []
    };
  },

  getExpiresAt: function(duration) {
    // respect network latency if possible
    var expiresIn;
    if (duration > 180) {
      expiresIn = duration - 120;
    } else {
      expiresIn = duration;
    }
    return new Date(new Date().getTime() + expiresIn * 1000);
  },

  getCallBackUrl: function(req) {
    var appRouterUrl = urlUtils.buildAppRouterUrl(req);
    var loginCallback = req.app.get('routerConfig').appConfig.login.callbackEndpoint;
    return urlUtils.join(appRouterUrl, loginCallback);
  },

  loadOauthOptions: function(req) {
    var routerConfig = req.app.get('routerConfig');
    var uaaOptions = routerConfig.uaaOptions;
    var uaaUrl = uaaUtils.getUaaUrl(routerConfig, urlUtils.getAppRouterHost(req));
    var options = {
      authorizationURL: urlUtils.join(uaaUrl, uaaOptions.authorizationEndpoint),
      tokenURL: urlUtils.join(uaaUrl, uaaOptions.tokenEndpoint),
      clientID: uaaOptions.clientID,
      clientSecret: uaaOptions.clientSecret,
      url: uaaUrl,
      callbackURL: this.getCallBackUrl(req),
      passReqToCallback: 'true',
      customHeaders: headerUtil.getBasicAuthHeader(uaaOptions.clientID, uaaOptions.clientSecret)
    };

    headerUtil.updateSapPassport(req.headers, options.customHeaders);
    return options;
  }
};
