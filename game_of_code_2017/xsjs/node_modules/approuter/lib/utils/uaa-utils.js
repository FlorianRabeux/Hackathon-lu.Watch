'use strict';

var _ = require('lodash');
var xsenv = require('sap-xsenv');
var path = require('path');
var url = require('url');
var logUtil = require('./logger');
var tracer = logUtil.getTracer();
var logger = logUtil.getLogger('/Configuration');


module.exports = {
  getOptions: function (workingDir) {
    var pathToDefaultServices = path.join(workingDir, 'default-services.json');
    var uaa;
    try {
      uaa = xsenv.getServices({ uaa: matchesUaa }, pathToDefaultServices).uaa;
    } catch (e) {
      logger.error(e, 'Cannot find service uaa in environment');
      return {};
    }

    return {
      authorizationEndpoint: '/oauth/authorize',
      tokenEndpoint: '/oauth/token',
      logoutEndpoint: '/logout.do',
      clientID: uaa.clientid,
      clientSecret: uaa.clientsecret,
      xsappname: uaa.xsappname,
      tenantmode: uaa.tenantmode || 'dedicated',
      uaadomain: uaa.uaadomain,
      url: uaa.url
    };
  },

  getUaaUrl: function (routerConfig, requestHost) {
    var uaaOptions = routerConfig.uaaOptions;
    if (uaaOptions.tenantmode !== 'shared') {
      return _.trimEnd(uaaOptions.url, '/');
    }
    requestHost = requestHost.split(':')[0]; // remove port
    var tenantHostPattern = routerConfig.tenantHostPattern;
    var tenantHostPatternMatches = tenantHostPattern.exec(requestHost);
    var tenant = tenantHostPatternMatches && tenantHostPatternMatches[1];
    var tenantUaaHost = (tenant ? tenant + '.' : '') + uaaOptions.uaadomain;
    var parsedUaaUrl = url.parse(uaaOptions.url);
    var uaaUrl = url.format({
      protocol: parsedUaaUrl.protocol,
      slashes: parsedUaaUrl.slashes,
      auth: parsedUaaUrl.auth,
      hostname: tenantUaaHost,
      port: parsedUaaUrl.port,
      pathname: parsedUaaUrl.pathname,
      search: parsedUaaUrl.search,
      hash: parsedUaaUrl.hash
    });
    tracer.debug('getUaaUrl: request host "%s", TENANT_HOST_PATTERN: %s, uaa url "%s"', requestHost, tenantHostPattern, uaaUrl);
    return uaaUrl;
  }
};

function matchesUaa(service) {
  var uaaName = process.env.UAA_SERVICE_NAME;
  if (uaaName) {
    return service.name === uaaName;
  }

  if (service.tags && _.includes(service.tags, 'xsuaa')) {
    return true;
  }
  if (service.label === 'user-provided' && service.credentials.tags && _.includes(service.credentials.tags, 'xsuaa')) {
    return true;
  }
  return false;
}
