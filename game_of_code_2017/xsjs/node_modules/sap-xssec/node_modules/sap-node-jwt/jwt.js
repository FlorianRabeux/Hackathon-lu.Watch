// Copyright (c) 2016, Markus Strehle, SAP SE
// All rights reserved.
//
//
// Load bindings binary
//
if (process.platform === "win32") {
   process.env['SSF_LIB'] =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapcrypto.dll';
   process.env['SSOEXT_LIB'] =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapssoext.dll';
} else {
   if (process.platform === "darwin") {
     process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcrypto.dylib';
   } else {
    if( process.arch === 'ppc64' ) {
        var os = require('os');
        var endianer = os.endianness().toLowerCase();
        if( endianer === 'le' ) {
          process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer + '/libsapcrypto.so';
        } else {
          process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcrypto.so';
        }
    } else {
      process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcrypto.so';
    }
   }
}

if (process.sapjwtlib) {
	return module.exports = process.sapjwtlib;
}
var fs = require('fs'), path = require('path');

// Seed random numbers [gh-82]
Math.random();

var oldDir = process.cwd();
if (process.platform === "win32") {
  process.env['PATH'] = process.env['PATH'] + ';' + __dirname + '\\deps\\' + process.platform + '\\' + process.arch;
  process.env['SSF_LIB'] =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapcrypto.dll';
  process.env['SSOEXT_LIB'] =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapssoext.dll';
  process.chdir(__dirname + '\\deps\\' + process.platform + '\\' + process.arch);
} else {
   if (process.platform === "darwin") {
     process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch;
     process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcrypto.dylib';
     process.env['SSOEXT_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapssoext.dylib';
   } else {
    if( process.arch === 'ppc64' ) {
        var os = require('os');
        var endianer = os.endianness().toLowerCase();
        if( endianer === 'le' ) {
          process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer;
          process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer +'/libsapcrypto.so';
          process.env['SSOEXT_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer +'/libsapssoext.so';
        } else {
          process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch;
          process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcrypto.so';
          process.env['SSOEXT_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapssoext.so';
        }
    }else {
     process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch;
     process.env['SSF_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcrypto.so';
     process.env['SSOEXT_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapssoext.so';
    }
   }
}
process.chdir(oldDir);

// Look for binary for this platform
var v8 = 'v8-'+ /[0-9]+\.[0-9]+/.exec(process.versions.v8)[0];
var modPath = path.join(__dirname, 'bin', process.platform+ '-'+ process.arch+ '-'+ v8, 'jwt');
if( process.arch === 'ppc64' ) {
	var os = require('os');
	var endianer = os.endianness().toLowerCase();
	if( endianer === 'le' ) {
		modPath = path.join(__dirname, 'bin', process.platform+ '-'+ process.arch + endianer + '-'+ v8, 'jwt');
	}
}
try {
	fs.statSync(modPath+ '.node');
} catch (ex) {
	// No binary!
	throw ex;
	//throw new Error('`'+ modPath+ '.node` is missing. Try reinstalling `node-jwt`?');
}
if (process.env['SSF_LIB'].length > 255) {
     var ssftemp;
     if (process.platform === "win32") {
         ssftemp = process.env['TEMP'] + '\\sapcrypto.dll';
         if(fs.existsSync(ssftemp))
            fs.unlinkSync(ssftemp);
         require('child_process').execSync('copy /y ' + process.env['SSF_LIB'] + ' ' + ssftemp);
         if (modPath.length > 240) {
            if(fs.existsSync(process.env['TEMP'] + '\\jwt.node'))
               fs.unlinkSync(process.env['TEMP'] + '\\jwt.node');
            require('child_process').execSync('copy /y ' + modPath + '.node ' + process.env['TEMP'] + '\\jwt.node');
            modPath =  process.env['TEMP'] + '\\jwt.node';
         }
     } else {
      try {
         ssftemp = '/tmp/libsapcrypto.tmp';
         if(fs.existsSync(ssftemp))
            fs.unlinkSync(ssftemp);
         require('child_process').execSync('cp -f '  + process.env['SSF_LIB'] + ' ' + ssftemp);
      } catch (ex) {}
     }
     // Pull in JWT implementation and start sapssoext/sapcrypto
     process.sapjwtlib = module.exports = require(modPath).jwtValidation;
     process.jjwtinstance = new process.sapjwtlib(ssftemp);
} else {
     // Pull in JWT implementation
     process.sapjwtlib = module.exports = require(modPath).jwtValidation;
}
