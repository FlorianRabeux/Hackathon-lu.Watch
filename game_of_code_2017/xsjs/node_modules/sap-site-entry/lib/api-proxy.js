'use strict';

class ApiProxy {

    constructor(request, config) {
        this.request = request;
        this.config = config;
    }

    proxy(req, user, callback) {

        let request = this.request,
            config = this.config,
            methodType = req.method.toLowerCase(),
            body = JSON.stringify(req.body);

        if (request[methodType]) {
            let backendUrl = config.getUrl();
            var options = {
                url: backendUrl + this.removeRestPrefix(req.url),
                headers: {
                    "Content-Type": 'application/json',
                    "instanceId": config.getInstanceId(),
                    "bindingId": config.getBindingId(),
                    "userId": user.userName,
                    "Authorization": 'Basic ' + new Buffer(config.getAuthUser() + ':' + config.getAuthPassword()).toString('base64')
                },
                timeout: 3000,
                body: body
            };

            if (methodType === 'get') {
                this.addUserAuth(options, user);
            }

            console.info("Connecting to backend", options.url);
            console.info("Request options", JSON.stringify(options, null, 4));
            request[methodType](options, callback);
        } else {
            throw Error("Not supported method");
        }
    }

    addUserAuth(options, user) {
        if (user.scopes) {
            options.headers["scopes"] = JSON.stringify(user.scopes);
        }
        if (user.userAttributes) {
            options.headers["attributes"] = JSON.stringify(user.userAttributes);
        }
    }

    removeRestPrefix(uri) {
        let newUri = uri.replace(/^\/portal\/rest\//, "");
        if (newUri !== uri) {
            return "/" + newUri;
        }
        return uri;
    }

}

module.exports = ApiProxy;