/**
 * Created by I306384 on 6/21/2016.
 */
'use strict';

const path = require('path'),
    userService = require('./user'),
    pathUtils = require("../lib/path-utils").pathUtils,
    config = require('../lib/config'),
    dynamicRoutes = require('../lib/routes'),
    request = require("request"),
    apiProxy = new (require("../lib/api-proxy"))(request, config);

function registerRests(approuter) {

    /* register getUser service */
    approuter.beforeRequestHandler.use(function (req, res, next) {
        var match = pathUtils.pathMatcher(req, '/api/user');
        if (match) {
            switch (req.method.toLowerCase()) {
                case 'get':
                    userService.getUser(req.session).then(data => sendData(res, data), err => respondWithError(res, err));
                    break;
                default:
                    respondMethodNotSupported(res);
            }
        } else {
            next();
        }
    });

    approuter.beforeRequestHandler.use((req, res, next) => {

        if (/^\/portal\/rest/.test(req.url)) {
            userService.getUserWithAuth(req.session).then(
                userDetails => {
                    try {
                        console.log('####user####: ' + JSON.stringify(userDetails));
                        apiProxy.proxy(req, userDetails, (error, response, body) => {
                            let jsonResponse = {};
                            if (error) {
                                respondWithError(res, error);
                            } else {
                                try {
                                    jsonResponse = JSON.parse(body);
                                } catch (error) {
                                    console.error("unable to parse site response");
                                }
                                sendData(res, new dynamicRoutes(approuter).applyRoutes(jsonResponse));
                            }
                        });
                    } catch (error) {
                        respondWithError(res, error);
                    }
                }).catch((error)=> {
                respondWithError(res, error);
            });
        } else {
            next()
        }
    });

}
/*#################### UTILS #######################
 ##################################################*/

function sendData(res, data) {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(data));
}

function respondWithError(res, err) {
    console.error(JSON.stringify(err, null, 3));
    res.statusCode = 500;
    res.end(JSON.stringify({
        status: 'error',
        msg: err
    }));
}

function respondMethodNotSupported(res) {
    res.status(405).send({
        status: 'error',
        msg: 'Method Not Allowed'
    })
}


module.exports = {
    registerRests: registerRests,
    userService: userService
};