'use strict';

var basicAuthHeaderParser = require('basic-auth');
var cookie = require('cookie');
var cookieUtils = require('../utils/cookie-utils');
var oauthConfig = require('./../passport/oauth-configuration');
var passport = require('passport');
var pathUtil = require('../utils/path-util');
var xhr = require('../xhr-login/xhr');

module.exports = {
  isLoginRequired: function (req) {
    var isPublicPath = pathUtil.isPublicPath(req);
    var isUserLoggedIn = module.exports.isUserLoggedIn(req);
    return !isPublicPath && !isUserLoggedIn;
  },

  isUserLoggedIn: function (req) {
    var user = req.session && req.session.user;
    if (!user || !user.token.accessToken || !user.token.expiryDate) {
      return false;
    }
    return user.token.expiryDate > Date.now();
  },

  getAuthenticator: function (req, res) {
    var oauthStrategy;
    var passportAuthOptions;

    if (pathUtil.isBasicAuthProtectedPath(req)) {
      var basicAuthHeader = basicAuthHeaderParser(req);
      if (!basicAuthHeader) {
        throw 401;
      } else {
        oauthStrategy = oauthConfig.getBasicOauthStrategy(req, basicAuthHeader.name, basicAuthHeader.pass);
      }
    } else {
      var locationAfterLogin = cookie.serialize('locationAfterLogin', req.url, { path: '/', httpOnly: true });
      cookieUtils.setCookie(res, locationAfterLogin);
      oauthStrategy = oauthConfig.getXSUAAOauthStrategy(req);
      passportAuthOptions = (xhr.isXhrLogin(req)) ? { failWithError: true } : null;
    }

    if (oauthStrategy) {
      passport.use(oauthStrategy);
      passport.serializeUser(oauthConfig.getUserSerializer);
      passport.deserializeUser(oauthConfig.getUserDeserializer);
      return passport.authenticate('oauth2', passportAuthOptions);
    }
    throw new Error('A login is required but the uaa configuration is broken or missing');
  }
};
