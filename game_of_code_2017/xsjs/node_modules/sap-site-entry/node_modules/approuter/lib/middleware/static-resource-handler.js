'use strict';

var _ = require('lodash');
var fs = require('fs');
var http = require('http');
var mustache = require('mustache');
var path = require('path');
var serveStatic = require('serve-static');

var contentTypeUtil = require('../utils/content-type');

module.exports = function staticResourceHandler(req, res, next) {
  var url = req.internalUrl;
  if (!url || !url.route || !url.route.localDir) {
    return next();
  }
  var app = req.app;
  var routerConfig = app.get('routerConfig');
  var tracer = req.loggingContext.getTracer();
  var fullDirName = path.resolve(routerConfig.workingDir, url.route.localDir);
  var cacheControl = url.route.cacheControl;
  cacheControl && res.setHeader('Cache-Control', cacheControl);
  tracer.info('[STATIC] Serving static path:', fullDirName);

  var replacements = url.route.replace;
  if (!replacements) {
    return serveStaticContent(fullDirName, req, res, url);
  }
  if (_.endsWith(url.pathname, '/')) {
    url.pathname += 'index.html';
  }
  var filePath = path.join(fullDirName, url.pathname);

  fs.realpath(filePath, function (err, resolvedPath) {
    if (err) {
      tracer.debug('Error during fs.realpath:', err);
      return sendError(req, res, 404, filePath);
    }
    if (!_.startsWith(resolvedPath, fullDirName)) {
      tracer.debug('Path traversal! Requested path:', resolvedPath);
      return sendError(req, res, 403);
    }
    var isMatching = replacements.pathSuffixes.some(function (suffix) {
      return _.endsWith(url.pathname, suffix);
    });
    if (isMatching) {
      serveReplacedFile(resolvedPath, req, res, replacements.varsMap);
    } else {
      serveStaticContent(fullDirName, req, res, url);
    }
  });
};

function serveStaticContent(fullDirName, req, res, url) {
  var tracer = req.loggingContext.getTracer();
  if (url.pathname === '') {
    req.url = path.join(url.pathname, path.sep);
  } else {
    req.url = url.pathname;
  }
  serveStatic(fullDirName, { cacheControl: false, fallthrough: false })(req, res, function (err) {
    if (err) {
      tracer.debug(err);
    }
    sendError(req, res, (err && err.status) || 404, fullDirName);
  });
}

function serveReplacedFile(filePath, req, res, vars) {
  var tracer = req.loggingContext.getTracer();
  fs.readFile(filePath, 'utf8', function (err, data) {
    if (err) {
      tracer.debug(err);
      return sendError(req, res, 404, filePath);
    }
    res.setHeader('Content-Type', contentTypeUtil.getContentType(filePath));
    try {
      res.end(mustache.render(data, vars));
    } catch (error) {
      tracer.debug('Error during mustache.render:', error);
      return sendError(req, res, 500);
    }
  });
}

function sendError(req, res, status, filePath) {
  var tracer = req.loggingContext.getTracer();
  res.writeHead(status);
  res.end(http.STATUS_CODES[status]);
  var notFoundMessage = filePath ? ' Cannot read file: ' + filePath : '';
  tracer.info('Request to %s failed with response: %d.%s', req.originalUrl, status, notFoundMessage);
}
