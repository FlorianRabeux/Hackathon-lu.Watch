'use strict';

var ws = require('ws');
var ConnectionHandler = require('./ConnectionHandler');
var loggerUtil = require('../utils/logger');
var connectUtils = require('../connect/utils');
var urlUtils = require('../utils/url-utils');
var whitilistUtils = require('../utils/whitelist-utils');
var util = require('util');

module.exports = WsProxy;

function WsProxy(approuter) {
  this._approuter = approuter;
  this._server = null;
  this._isEnabled = approuter.get('routerConfig').appConfig.websockets.enabled;
}

WsProxy.prototype.close = function (callback) {
  if (this._server) {
    this._server.close(callback);
  } else {
    process.nextTick(callback);
  }
};

WsProxy.prototype.listen = function(httpServer) {
  if (this._server) {
    throw new Error('Websocket server already running!');
  }
  var wsAllowedOrigins = this._approuter.get('routerConfig').wsAllowedOrigins;

  var self = this;
  this._server = new ws.Server({
    server: httpServer,
    verifyClient: function(info, cb) {
      var req = info.req;
      connectUtils.setPropertiesToRequest(req, self._approuter);
      req.loggingContext = loggerUtil.createRequestContext(req);
      if (!self._isEnabled) {
        req.loggingContext.getTracer().info('Request to path %s failed due to disabled websockets', req.url);
        return cb(false, 403, 'Websockets are disabled');
      }
      if (!wsAllowedOrigins) {
        var appRouterUrl = urlUtils.parse(urlUtils.buildAppRouterUrl(req));
        wsAllowedOrigins = getDefaultAllowedOrigin(appRouterUrl);
      }
      if (info.origin && whitilistUtils.matchWhitelist(wsAllowedOrigins, info.origin)) {
        cb(true);
      } else {
        var message = info.origin ? util.format("Origin '%s' is not allowed", info.origin) : 'Missing origin header';
        cb(false, 403, message);
      }
    }
  });
  this._server.on('connection', function serverConnection(incoming) {
    var handler = new ConnectionHandler(incoming.upgradeReq.loggingContext);
    handler.createConnection(incoming, self._approuter);
  });
};

function getDefaultAllowedOrigin(appRouterUrl) {
  return [{
    protocol: appRouterUrl.protocol.slice(0, -1),
    host: appRouterUrl.hostname,
    port: appRouterUrl.port
  }];
}
