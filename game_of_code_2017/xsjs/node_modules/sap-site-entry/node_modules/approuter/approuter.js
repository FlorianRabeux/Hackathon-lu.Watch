'use strict';

var assert = require('assert');
var commander = require('commander');
var _ = require('lodash');

var bootstrap = require('./lib/bootstrap');
var loggerUtil = require('./lib/utils/logger');
var JsonValidator = require('./lib/utils/JsonValidator');
var MiddlewareList = require('./lib/extensions/MiddlewareList');
var serverLib = require('./lib/server');
var optionalCallback = require('./lib/utils/callback');

module.exports = Approuter;

function Approuter() {
  assert(arguments.length === 0, 'Constructor takes no arguments');
  if (!(this instanceof Approuter)) {
    return new Approuter();
  }

  this.cmdParser = new commander.Command()
    .option('-w, --workingDir <s>', 'The working directory containting the resources folder and xs-app.json file')
    .option('-p, --port <n>', 'The port of the approuter');

  this.first = new MiddlewareList();
  this.beforeRequestHandler = new MiddlewareList();
  this.beforeErrorHandler = new MiddlewareList();
}

Approuter.prototype.start = function (options, callback) {
  var self = this;
  if (options) {
    validateOptions(options);
    options = _.cloneDeep(options);
  } else {
    options = {};
  }
  callback = optionalCallback(callback);

  if (this.cmdParser) {
    this.cmdParser.parse(process.argv);
    options = _.defaults(options, this.cmdParser);
  }
  addImplicitExtension(this, options);

  var logger = loggerUtil.getLogger('/approuter');
  logger.info('Application router version %s', require('./package.json').version);

  var approuter = bootstrap(options);
  approuter.logger = logger;
  serverLib.start(approuter, function(err, server) {
    self._server = server;
    callback(err);
  });
};

Approuter.prototype.close = function (callback) {
  if (this._server) {
    this._server.close(callback);
  } else {
    process.nextTick(callback);
  }
};

function validateOptions(options) {
  var schema = require('./lib/configuration/schemas/options-schema');
  var validator = new JsonValidator();
  validator.addFormat('function', function functionFormat(data) {
    if (typeof data !== 'function') {
      return 'Function expected';
    }
  });
  validator.validate(options, schema, 'options');
}

function addImplicitExtension(ar, options) {
  var ext = {
    insertMiddleware: {
      first: ar.first._middleware,
      beforeRequestHandler: ar.beforeRequestHandler._middleware,
      beforeErrorHandler: ar.beforeErrorHandler._middleware
    }
  };
  options.extensions = options.extensions || [];
  options.extensions.unshift(ext);
}


if (require.main === module) {
  var ar = new Approuter();
  ar.start();
}

