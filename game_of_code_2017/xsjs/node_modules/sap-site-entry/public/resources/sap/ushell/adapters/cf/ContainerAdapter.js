// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container adapter for standalone fioris.
 *
 * @version 3.6.0-SNAPSHOT
 */
/**
 * @namespace Default namespace for Unified Shell adapters for standalone fioris. They can usually
 * be placed directly into this namespace, e.g.
 * <code>sap.ushell.adapters.fiori.ContainerAdapter</code>.
 *
 * @name sap.ushell.adapters.fiori
 * @see sap.ushell.adapters.fiori.ContainerAdapter
 * @since 1.15.0
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.adapters.cf.ContainerAdapter");
    //jQuery.sap.require("sap.hana.uis.flp.model.UISFioriModel");
    //jQuery.sap.require("sap.hana.uis.flp.CRUDManager");
    jQuery.sap.require("sap.ushell.User");
    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.services.initializeContainer("fiori")</code>.
     * Constructs a new instance of the container adapter for standalone fioris.
     *
     * @param {sap.ushell.System} oSystem
     *     the logon system (alias, platform, base URL)
     *
     * @class The Unified Shell's container adapter which does the bootstrap for standalone fioris.
     *
     * @constructor
     * @see sap.ushell.services.initializeContainer
     * @since 1.15.0
     */
    sap.ushell.adapters.cf.ContainerAdapter = function (oSystem) {
        var oUser;
        this._sUserUrl = '/api/user';
        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in
         *
         * @since 1.15.0
         */
        this.getSystem = function () {
            return oSystem;
        };

        this.setUser = function (user) {
            oUser = user;
        };

        this.createUserObject = function (userObj) {
            return new sap.ushell.User({
                "id": userObj.userId || "",
                "fullName": userObj.userName || "Default User",
                "firstName": userObj.userFirstName || "",
                "lastName": userObj.userLastName || "",
                "email": userObj.userEmail || "",
                "languageBcp47": sap.ui.getCore().getConfiguration().getLocale().getLanguage(),
                "language": sap.ui.getCore().getConfiguration().getLocale().getSAPLogonLanguage(),
                "setAccessibilityPermitted": true,
                "setThemePermitted": true
            });
        };

        this.load = function load() {
            var oDeferred = new jQuery.Deferred(),
            that = this;

            jQuery.ajax({
                method: "get",
                url: that._sUserUrl,
                dataType: "json"
            }).done(function (oData) {
                jQuery.sap.log.info("User data successfully loaded from " + that._sUserUrl);
                var user = that.createUserObject(oData);
                that.setUser(user);
                oDeferred.resolve(oData);
            }).fail(function (err) {
                jQuery.sap.log.error("Failed to load user info from " + that._sUserUrl, JSON.stringify(err));
                oDeferred.reject(err);
            });

            return oDeferred.promise();
        };

        /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         */
        this.getUser = function () {
            if (!oUser) {
                oUser = {
                    getFullName: function() {

                        return "";
                    },
                    getImage: function() {
                        return "";
                    },
                    isJamActive: function() {
                        return false;
                    }
                };
            }
            return oUser;
        };

        /**
         * Logs out the current user from this adapter's systems backend system.
         *
         * @param {boolean} bLogonSystem
         *      <code>true</code> if this system is the logon system
         * @returns {jQuery.Deferred}
         *      a <code>jQuery.Deferred</code> object's promise to be resolved when logout is
         *      finished, even when it failed
         * @since 1.11.0
         */
        this.logout = function logout(bLogonSystem) {
            var dfr = new jQuery.Deferred();

            if (bLogonSystem) {
                var pathname = jQuery('<div/>').text(window.location.pathname).html().replace(/&amp;/g, '&'),
                    search = jQuery('<div/>').text(window.location.search).html().replace(/&amp;/g, '&');

                // Navigate to Logoff page without return url:
                window.location = "/logout";
                dfr.resolve();
            }
            return dfr.promise();
        };
    };
}());