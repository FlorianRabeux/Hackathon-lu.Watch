'use strict';

var AcceptLanguageParser = require('accept-language');
var fs = require('fs');
var os = require('os');
var SAPPassport = require('sap-e2e-trace').Passport;
var internalConsts = require('./internalConstants');
var logger = require('./utils/logger').getLogger();

exports.getGlobalOptions = getGlobalOptions;
exports.getRequestOptions = getRequestOptions;

function getRequestOptions(req) {
  var opt = { session: {} };

  opt.session.XS_APPLICATIONUSER = req.authInfo && req.authInfo.getToken &&
    req.authInfo.getToken(internalConsts.SYSTEM, internalConsts.HDB);

  if (req.headers[SAPPassport.HEADER_NAME]) {
    var passport = new SAPPassport(req.headers[SAPPassport.HEADER_NAME]);
    passport.compact();
    opt.session.SAP_PASSPORT = passport.serialize();
  }

  opt.locale = resolveRequestLanguage(req);

  return opt;
}

function resolveRequestLanguage(req) {
  var sapLang = req.headers['x-sap-request-language'];
  if (sapLang) {
    return sapLang;
  }

  var acceptLanguage = req.headers['accept-language'];
  if (acceptLanguage) {
    var languagesByPreference = AcceptLanguageParser.parse(acceptLanguage);
    if (languagesByPreference.length) {
      return languagesByPreference[0].value;
    }
  }

  return '';
}

function getGlobalOptions() {
  return {
    session: {
      APPLICATION: getApplicationName(),
      APPLICATIONVERSION: getApplicationVersion()
    }
  };
}

function getApplicationName() {
  if (process.env.VCAP_APPLICATION) {
    var app = JSON.parse(process.env.VCAP_APPLICATION);
    var components = [app.application_name, app.space_name, app.organization_name]
      .filter(Boolean);
    if (components.length > 0) {
      return components.join('/');
    }
  }
  return process.pid + '@' + os.hostname();
}

function getApplicationVersion() {
  try {
    var pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    return pkg.name + '@' + pkg.version;
  } catch (err) {
    logger.debug(err);
  }
}
